{"version":3,"sources":["../../../../../../usr/local/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","assets/js/scripts.js","node_modules/bezier-easing/src/index.js","node_modules/canvas-sketch-util/random.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/defined/index.js","node_modules/eases/back-in-out.js","node_modules/eases/back-in.js","node_modules/eases/back-out.js","node_modules/eases/bounce-in-out.js","node_modules/eases/bounce-in.js","node_modules/eases/bounce-out.js","node_modules/eases/circ-in-out.js","node_modules/eases/circ-in.js","node_modules/eases/circ-out.js","node_modules/eases/cubic-in-out.js","node_modules/eases/cubic-in.js","node_modules/eases/cubic-out.js","node_modules/eases/elastic-in-out.js","node_modules/eases/elastic-in.js","node_modules/eases/elastic-out.js","node_modules/eases/expo-in-out.js","node_modules/eases/expo-in.js","node_modules/eases/expo-out.js","node_modules/eases/index.js","node_modules/eases/linear.js","node_modules/eases/quad-in-out.js","node_modules/eases/quad-in.js","node_modules/eases/quad-out.js","node_modules/eases/quart-in-out.js","node_modules/eases/quart-in.js","node_modules/eases/quart-out.js","node_modules/eases/quint-in-out.js","node_modules/eases/quint-in.js","node_modules/eases/quint-out.js","node_modules/eases/sine-in-out.js","node_modules/eases/sine-in.js","node_modules/eases/sine-out.js","node_modules/nice-color-palettes/100.json","node_modules/seed-random/index.js","node_modules/simplex-noise/simplex-noise.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","global","THREE","canvasSketch","random","palettes","eases","context","renderer","WebGLRenderer","canvas","setClearColor","camera","OrthographicCamera","scene","Scene","geometry","BoxGeometry","palette","pick","mesh","Mesh","MeshStandardMaterial","color","position","set","range","scale","multiplyScalar","add","AmbientLight","light","DirectionalLight","[object Object]","pixelRatio","viewportWidth","viewportHeight","setPixelRatio","setSize","aspect","left","right","top","bottom","near","far","lookAt","Vector3","updateProjectionMatrix","playhead","Math","sin","PI","rotation","y","expoInOut","render","dispose","fps","duration","animate","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","LinearEasing","x","mX1","mY1","mX2","mY2","sampleValues","Array","getTForX","aX","intervalStart","currentSample","lastSample","guessForT","initialSlope","aGuessT","currentSlope","newtonRaphsonIterate","aA","aB","currentX","currentT","abs","binarySubdivide","seedRandom","SimplexNoise","defined","createRandom","defaultSeed","currentSeed","currentRandom","noiseGenerator","defaultRandom","_nextGaussian","_hasNextGaussian","setSeed","value","getSeed","getRandomSeed","String","floor","valueNonZero","permuteNoise","createNoise","noise1D","frequency","amplitude","isFinite","TypeError","noise2D","noise3D","z","noise4D","w","sign","boolean","chance","rangeFloor","array","shuffle","arr","isArray","rand","tmp","len","ret","slice","onCircle","insideCircle","radius","out","sqrt","onSphere","v","phi","theta","acos","cos","insideSphere","k","cbrt","quaternion","u1","u2","u3","sq1","sq2","theta1","theta2","weighted","weightedSet","weightedSetIndex","gaussian","mean","standardDerivation","result","v1","v2","s","multiplier","log","seed","opt","undefined","min","max","map","weight","weights","totalWeight","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","getOwnPropertyNames","test2","fromCharCode","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","toObject","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","copy","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","S","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","type","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","file","totalFrames","layerStr","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","gl","attribs","names","getContext","createCanvas","ownsCanvas","newCanvas","createCanvasElement","attributes","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","_resizeHandler","resize","sketch","get","this","_computePlayhead","currentTime","_computeFrame","time","_computeCurrentFrame","_getSizeProps","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","bounceOut","t2","pow","backInOut","backIn","backOut","bounceInOut","bounceIn","circInOut","circIn","circOut","cubicInOut","cubicIn","cubicOut","elasticInOut","elasticIn","elasticOut","expoIn","expoOut","linear","quadInOut","quadIn","quadOut","quartInOut","quartIn","quartOut","quintInOut","quintIn","quintOut","sineInOut","sineIn","sineOut","pool","GLOBAL","startdenom","significance","overflow","oldRandom","ARC4","keylen","me","j","g","count","mixkey","smear","stringseed","tostring","apply","options","arc4","flatten","depth","prop","typ","entropy","crypto","getRandomValues","navigator","plugins","screen","autoseed","resetGlobal","F2","G2","G3","F4","G4","randomOrSeed","s0","s1","s2","mash","alea","buildPermutationTable","perm","permMod12","aux","grad3","grad4","xin","yin","i1","j1","n0","n1","n2","x0","y0","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","gi2","zin","n3","k1","i2","j2","k2","z0","z1","z2","x3","y3","z3","kk","t3","gi3","n4","l1","l2","i3","j3","k3","l3","w0","rankx","ranky","rankz","rankw","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","define","amd","factory","runtime","undefined$1","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","reverse","skipTempReset","prev","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","asyncGeneratorStep","gen","_next","_throw","_defineProperties","descriptor","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","_setPrototypeOf","_assertThisInitialized","ReferenceError","_arrayLikeToArray","arr2","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_unsupportedIterableToArray","bind","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","index","splice","dispatchEvent","event","_lut","_seed","MathUtils","DEG2RAD","RAD2DEG","generateUUID","d0","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","damp","lambda","dt","exp","pingpong","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","c2","c13","s13","c1_3","s1_3","c3_1","s3_1","Vector2","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isVector2","_canvas","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","invert","t11","t12","t13","det","detInv","transpose","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","cx","cy","rotate","translate","matrix","isMatrix3","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","_EventDispatcher","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","_this","DEFAULT_IMAGE","DEFAULT_MAPPING","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","updateMatrix","toJSON","meta","isRootObject","textures","metadata","images","url","serializeImage","isDataTexture","transformUv","uv","HTMLImageElement","ImageBitmap","isTexture","Vector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","isWebGLRenderTarget","WebGLMultisampleRenderTarget","_WebGLRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","dir","sqrSin","EPSILON","tDir","multiplyQuaternionsFlat","_onChangeCallback","setFromEuler","euler","isEuler","_order","c1","c3","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","isBox3","_testAxis","v0","extents","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","makeOrthographic","isMatrix4","_matrix","_quaternion$1","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","_i","_l","_i2","_i3","extractFromCache","_shapes","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","isPlane","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","materialId","Material","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","isMaterial","onBeforeCompile","customProgramCacheKey","setValues","newValue","currentValue","isColor","flatShading","isRoot","_data","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","reflectivity","refractionRatio","combine","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","skinning","srcPlanes","dstPlanes","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","components","parseInt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","MeshBasicMaterial","_Material","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","Float64Array","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isFloat16BufferAttribute","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","_il","_il2","_morphAttribute","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","group","handleTriangle","tmp2","_i4","_il3","_group","_start","_j","_jl","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","_i5","_il4","_i6","_il5","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","_name","morphArray","morphAttribute","_newAttribute","_i7","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute2","_attributeData","_name2","_i8","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","checkBufferGeometryIntersection","raycaster","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","checkIntersection","face","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","_a","_b","_c","_groupMaterial","isGeometry","_BufferGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","PerspectiveCamera","fov","zoom","focus","view","filmGauge","filmOffset","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","_Object3D","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","_this$children","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_Texture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","currentMinFilter","stencil","DataTexture","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_attribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","has","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","physical","transmission","transmissionMap","DataTexture2DArray","wrapR","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","_uniforms5","_uniforms6","_uniforms7","_uniforms8","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isRenderTarget3D","createFramebuffer","glTextureType","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onInputSourcesChange","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","_ref","_callee","baseLayer","_context","getContextAttributes","xrCompatible","makeXRCompatible","XRWebGLLayer","antialias","updateRenderState","requestReferenceSpace","args","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","display","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","setOpaqueSort","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","_geometry","_material","opaqueObjects","transparentObjects","_textureProperties","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","_srcTexture$image","unpackRowLen","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","joints","inputState","pinching","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","_step","_iterator","inputjoint","jointPose","getJointPose","jointName","_joint","joint","jointRadius","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","WebGL1Renderer","_WebGLRenderer","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$7","_matrix$1","SkinnedMesh","bindMatrixInverse","Bone","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","_bone","getBoneByName","fromJSON","json","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","linecap","linejoin","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_distance","_start$1","_end$1","LineSegments","LineLoop","_Line","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","ConeGeometry","_CylinderGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","DodecahedronGeometry","_PolyhedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","hl","ahole","_h","_hl","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","_i9","_i10","_face","_i11","_face2","_i12","_face3","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","_base","OctahedronGeometry","ParametricGeometry","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_l2","_l3","_toJSON$1","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","_ExtrudeGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateIndices","generateBufferData","WireframeGeometry","edge","edges","ol","edge1","edge2","Geometries","freeze","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","_ShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","_LineBasicMaterial","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","_startIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","_KeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","AnimationLoader","_Loader","CompressedTextureLoader","loaded","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","onImageError","CubeTextureLoader","urls","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","EllipseCurve","_Curve","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","_EllipseCurve","aRadius","CubicPoly","c0","initCatmullRom","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","pz","CatmullRomCurve3","curveType","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","Path","_CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","_Path","getPointsHoles","holesPts","Light","HemisphereLight","_Light","_lightPositionWorld","_lookTarget","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","_LightShadow","isSpotLightShadow","SpotLight","power","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","PointLightShadow","_cubeDirections","_cubeUps","PointLight","_Camera","scaleW","scaleH","DirectionalLightShadow","isDirectionalLightShadow","RectAreaLight","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","child","geometryShapes","bufferGeometryLoader","details","deserializeImage","loadImage","deserializedImage","_deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","isImageBitmapLoader","setOptions","fetchOptions","credentials","headers","colorSpaceConversion","imageBitmap","ShapePath","subPaths","currentPath","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","createPath","createPaths","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","substring","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","_LightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nCachedObjects_","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$8","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$9","SpotLightHelper","cone","coneLength","coneWidth","_vector$a","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$b","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$c","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","PMREMGenerator","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","construct","fromPoints","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","__THREE__","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","globalThis","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","_domElementKeyEvents","getPolarAngle","spherical","getAzimuthalAngle","listenToKeyEvents","onKeyDown","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function(){\n\n    // Ensure ThreeJS is in global scope for the 'examples/'\n    global.THREE = require(\"three\");\n\n    // Include any additional ThreeJS examples below\n    require(\"three/examples/js/controls/OrbitControls\");\n\n    const canvasSketch = require(\"canvas-sketch\");\n    const random = require('canvas-sketch-util/random');\n    const palettes = require('nice-color-palettes');\n    const eases = require('eases');\n    const BezierEasing = require('bezier-easing')\n\n    const settings = {\n    //dimensions: [512,512],\n    fps: 60,\n    duration: 10,\n    animate: true,\n    context: \"webgl\"\n    };\n\n    const sketch = ({ context }) => {\n    // Create a renderer\n    const renderer = new THREE.WebGLRenderer({\n        canvas: context.canvas\n    });\n\n    // WebGL background color\n    renderer.setClearColor(\"hsl(0, 0%, 95%)\", 1);\n\n    // Setup a camera\n    const camera = new THREE.OrthographicCamera();\n    //camera.position.set(0, 0, -4);\n    //camera.lookAt(new THREE.Vector3());\n\n\n    // Setup your scene\n    const scene = new THREE.Scene();\n\n    // Setup a geometry\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n\n    const palette = random.pick(palettes)\n\n    for(let i=0; i<40; i++) {\n        const mesh = new THREE.Mesh(geometry,\n        new THREE.MeshStandardMaterial({\n            color: random.pick(palette)\n        }));\n    \n        mesh.position.set(\n        random.range(-1,1), \n        random.range(-1,1), \n        random.range(-1,1) \n        )\n        mesh.scale.set(\n        random.range(-1,1), \n        random.range(-1,1), \n        random.range(-1,1) \n        )\n        mesh.scale.multiplyScalar(0.5);\n        scene.add(mesh);\n    }\n\n    scene.add(new THREE.AmbientLight('hsl(0, 10%, 90%)'));\n\n    const light = new THREE.DirectionalLight('white', 1);\n    light.position.set(0,0,4);\n    scene.add(light);\n\n    // draw each frame\n    return {\n        // Handle resize events here\n        resize({ pixelRatio, viewportWidth, viewportHeight }) {\n        renderer.setPixelRatio(pixelRatio);\n        renderer.setSize(viewportWidth, viewportHeight, false);\n        const aspect = viewportWidth/viewportHeight;\n        const zoom = 2;\n\n        camera.left = -zoom * aspect;\n        camera.right = zoom * aspect;\n        camera.top = zoom;\n        camera.bottom = -zoom;\n\n        camera.near = -100;\n        camera.far = 100;\n\n        camera.position.set(zoom, zoom, zoom);\n        camera.lookAt(new THREE.Vector3());\n        \n        camera.updateProjectionMatrix();\n        },\n        // Update & render your scene here\n        render({ playhead }) {\n        const t = Math.sin(playhead * Math.PI)\n        scene.rotation.y = eases.expoInOut(t);\n        renderer.render(scene, camera);\n        },\n        // Dispose of events & renderer for cleaner hot-reloading\n        unload() {\n        renderer.dispose();\n        }\n    };\n    };\n\n    canvasSketch(sketch, settings);\n})();","/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n","var seedRandom = require('seed-random');\nvar SimplexNoise = require('simplex-noise');\nvar defined = require('defined');\n\nfunction createRandom (defaultSeed) {\n  defaultSeed = defined(defaultSeed, null);\n  var defaultRandom = Math.random;\n  var currentSeed;\n  var currentRandom;\n  var noiseGenerator;\n  var _nextGaussian = null;\n  var _hasNextGaussian = false;\n\n  setSeed(defaultSeed);\n\n  return {\n    value: value,\n    createRandom: function (defaultSeed) {\n      return createRandom(defaultSeed);\n    },\n    setSeed: setSeed,\n    getSeed: getSeed,\n    getRandomSeed: getRandomSeed,\n    valueNonZero: valueNonZero,\n    permuteNoise: permuteNoise,\n    noise1D: noise1D,\n    noise2D: noise2D,\n    noise3D: noise3D,\n    noise4D: noise4D,\n    sign: sign,\n    boolean: boolean,\n    chance: chance,\n    range: range,\n    rangeFloor: rangeFloor,\n    pick: pick,\n    shuffle: shuffle,\n    onCircle: onCircle,\n    insideCircle: insideCircle,\n    onSphere: onSphere,\n    insideSphere: insideSphere,\n    quaternion: quaternion,\n    weighted: weighted,\n    weightedSet: weightedSet,\n    weightedSetIndex: weightedSetIndex,\n    gaussian: gaussian\n  };\n\n  function setSeed (seed, opt) {\n    if (typeof seed === 'number' || typeof seed === 'string') {\n      currentSeed = seed;\n      currentRandom = seedRandom(currentSeed, opt);\n    } else {\n      currentSeed = undefined;\n      currentRandom = defaultRandom;\n    }\n    noiseGenerator = createNoise();\n    _nextGaussian = null;\n    _hasNextGaussian = false;\n  }\n\n  function value () {\n    return currentRandom();\n  }\n\n  function valueNonZero () {\n    var u = 0;\n    while (u === 0) u = value();\n    return u;\n  }\n\n  function getSeed () {\n    return currentSeed;\n  }\n\n  function getRandomSeed () {\n    var seed = String(Math.floor(Math.random() * 1000000));\n    return seed;\n  }\n\n  function createNoise () {\n    return new SimplexNoise(currentRandom);\n  }\n\n  function permuteNoise () {\n    noiseGenerator = createNoise();\n  }\n\n  function noise1D (x, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, 0);\n  }\n\n  function noise2D (x, y, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, y * frequency);\n  }\n\n  function noise3D (x, y, z, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise3D(\n      x * frequency,\n      y * frequency,\n      z * frequency\n    );\n  }\n\n  function noise4D (x, y, z, w, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    if (!isFinite(w)) throw new TypeError('w component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise4D(\n      x * frequency,\n      y * frequency,\n      z * frequency,\n      w * frequency\n    );\n  }\n\n  function sign () {\n    return boolean() ? 1 : -1;\n  }\n\n  function boolean () {\n    return value() > 0.5;\n  }\n\n  function chance (n) {\n    n = defined(n, 0.5);\n    if (typeof n !== 'number') throw new TypeError('expected n to be a number');\n    return value() < n;\n  }\n\n  function range (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return value() * (max - min) + min;\n  }\n\n  function rangeFloor (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return Math.floor(range(min, max));\n  }\n\n  function pick (array) {\n    if (array.length === 0) return undefined;\n    return array[rangeFloor(0, array.length)];\n  }\n\n  function shuffle (arr) {\n    if (!Array.isArray(arr)) {\n      throw new TypeError('Expected Array, got ' + typeof arr);\n    }\n\n    var rand;\n    var tmp;\n    var len = arr.length;\n    var ret = arr.slice();\n    while (len) {\n      rand = Math.floor(value() * len--);\n      tmp = ret[len];\n      ret[len] = ret[rand];\n      ret[rand] = tmp;\n    }\n    return ret;\n  }\n\n  function onCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var theta = value() * 2.0 * Math.PI;\n    out[0] = radius * Math.cos(theta);\n    out[1] = radius * Math.sin(theta);\n    return out;\n  }\n\n  function insideCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    onCircle(1, out);\n    var r = radius * Math.sqrt(value());\n    out[0] *= r;\n    out[1] *= r;\n    return out;\n  }\n\n  function onSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var phi = u;\n    var theta = Math.acos(v);\n    out[0] = radius * Math.sin(theta) * Math.cos(phi);\n    out[1] = radius * Math.sin(theta) * Math.sin(phi);\n    out[2] = radius * Math.cos(theta);\n    return out;\n  }\n\n  function insideSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var k = value();\n\n    var phi = u;\n    var theta = Math.acos(v);\n    var r = radius * Math.cbrt(k);\n    out[0] = r * Math.sin(theta) * Math.cos(phi);\n    out[1] = r * Math.sin(theta) * Math.sin(phi);\n    out[2] = r * Math.cos(theta);\n    return out;\n  }\n\n  function quaternion (out) {\n    out = out || [];\n    var u1 = value();\n    var u2 = value();\n    var u3 = value();\n\n    var sq1 = Math.sqrt(1 - u1);\n    var sq2 = Math.sqrt(u1);\n\n    var theta1 = Math.PI * 2 * u2;\n    var theta2 = Math.PI * 2 * u3;\n\n    var x = Math.sin(theta1) * sq1;\n    var y = Math.cos(theta1) * sq1;\n    var z = Math.sin(theta2) * sq2;\n    var w = Math.cos(theta2) * sq2;\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  function weightedSet (set) {\n    set = set || [];\n    if (set.length === 0) return null;\n    return set[weightedSetIndex(set)].value;\n  }\n\n  function weightedSetIndex (set) {\n    set = set || [];\n    if (set.length === 0) return -1;\n    return weighted(set.map(function (s) {\n      return s.weight;\n    }));\n  }\n\n  function weighted (weights) {\n    weights = weights || [];\n    if (weights.length === 0) return -1;\n    var totalWeight = 0;\n    var i;\n\n    for (i = 0; i < weights.length; i++) {\n      totalWeight += weights[i];\n    }\n\n    if (totalWeight <= 0) throw new Error('Weights must sum to > 0');\n\n    var random = value() * totalWeight;\n    for (i = 0; i < weights.length; i++) {\n      if (random < weights[i]) {\n        return i;\n      }\n      random -= weights[i];\n    }\n    return 0;\n  }\n\n  function gaussian (mean, standardDerivation) {\n    mean = defined(mean, 0);\n    standardDerivation = defined(standardDerivation, 1);\n\n    // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496\n    if (_hasNextGaussian) {\n      _hasNextGaussian = false;\n      var result = _nextGaussian;\n      _nextGaussian = null;\n      return mean + standardDerivation * result;\n    } else {\n      var v1 = 0;\n      var v2 = 0;\n      var s = 0;\n      do {\n        v1 = value() * 2 - 1; // between -1 and 1\n        v2 = value() * 2 - 1; // between -1 and 1\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      var multiplier = Math.sqrt(-2 * Math.log(s) / s);\n      _nextGaussian = (v2 * multiplier);\n      _hasNextGaussian = true;\n      return mean + standardDerivation * (v1 * multiplier);\n    }\n  }\n}\n\nmodule.exports = createRandom();\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","function backInOut(t) {\n  var s = 1.70158 * 1.525\n  if ((t *= 2) < 1)\n    return 0.5 * (t * t * ((s + 1) * t - s))\n  return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)\n}\n\nmodule.exports = backInOut","function backIn(t) {\n  var s = 1.70158\n  return t * t * ((s + 1) * t - s)\n}\n\nmodule.exports = backIn","function backOut(t) {\n  var s = 1.70158\n  return --t * t * ((s + 1) * t + s) + 1\n}\n\nmodule.exports = backOut","var bounceOut = require('./bounce-out')\n\nfunction bounceInOut(t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5\n}\n\nmodule.exports = bounceInOut","var bounceOut = require('./bounce-out')\n\nfunction bounceIn(t) {\n  return 1.0 - bounceOut(1.0 - t)\n}\n\nmodule.exports = bounceIn","function bounceOut(t) {\n  var a = 4.0 / 11.0\n  var b = 8.0 / 11.0\n  var c = 9.0 / 10.0\n\n  var ca = 4356.0 / 361.0\n  var cb = 35442.0 / 1805.0\n  var cc = 16061.0 / 1805.0\n\n  var t2 = t * t\n\n  return t < a\n    ? 7.5625 * t2\n    : t < b\n      ? 9.075 * t2 - 9.9 * t + 3.4\n      : t < c\n        ? ca * t2 - cb * t + cc\n        : 10.8 * t * t - 20.52 * t + 10.72\n}\n\nmodule.exports = bounceOut","function circInOut(t) {\n  if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1)\n  return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)\n}\n\nmodule.exports = circInOut","function circIn(t) {\n  return 1.0 - Math.sqrt(1.0 - t * t)\n}\n\nmodule.exports = circIn","function circOut(t) {\n  return Math.sqrt(1 - ( --t * t ))\n}\n\nmodule.exports = circOut","function cubicInOut(t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0\n}\n\nmodule.exports = cubicInOut","function cubicIn(t) {\n  return t * t * t\n}\n\nmodule.exports = cubicIn","function cubicOut(t) {\n  var f = t - 1.0\n  return f * f * f + 1.0\n}\n\nmodule.exports = cubicOut","function elasticInOut(t) {\n  return t < 0.5\n    ? 0.5 * Math.sin(+13.0 * Math.PI/2 * 2.0 * t) * Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * Math.sin(-13.0 * Math.PI/2 * ((2.0 * t - 1.0) + 1.0)) * Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0\n}\n\nmodule.exports = elasticInOut","function elasticIn(t) {\n  return Math.sin(13.0 * t * Math.PI/2) * Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = elasticIn","function elasticOut(t) {\n  return Math.sin(-13.0 * (t + 1.0) * Math.PI/2) * Math.pow(2.0, -10.0 * t) + 1.0\n}\n\nmodule.exports = elasticOut","function expoInOut(t) {\n  return (t === 0.0 || t === 1.0)\n    ? t\n    : t < 0.5\n      ? +0.5 * Math.pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * Math.pow(2.0, 10.0 - (t * 20.0)) + 1.0\n}\n\nmodule.exports = expoInOut","function expoIn(t) {\n  return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = expoIn","function expoOut(t) {\n  return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t)\n}\n\nmodule.exports = expoOut","module.exports = {\n\t'backInOut': require('./back-in-out'),\n\t'backIn': require('./back-in'),\n\t'backOut': require('./back-out'),\n\t'bounceInOut': require('./bounce-in-out'),\n\t'bounceIn': require('./bounce-in'),\n\t'bounceOut': require('./bounce-out'),\n\t'circInOut': require('./circ-in-out'),\n\t'circIn': require('./circ-in'),\n\t'circOut': require('./circ-out'),\n\t'cubicInOut': require('./cubic-in-out'),\n\t'cubicIn': require('./cubic-in'),\n\t'cubicOut': require('./cubic-out'),\n\t'elasticInOut': require('./elastic-in-out'),\n\t'elasticIn': require('./elastic-in'),\n\t'elasticOut': require('./elastic-out'),\n\t'expoInOut': require('./expo-in-out'),\n\t'expoIn': require('./expo-in'),\n\t'expoOut': require('./expo-out'),\n\t'linear': require('./linear'),\n\t'quadInOut': require('./quad-in-out'),\n\t'quadIn': require('./quad-in'),\n\t'quadOut': require('./quad-out'),\n\t'quartInOut': require('./quart-in-out'),\n\t'quartIn': require('./quart-in'),\n\t'quartOut': require('./quart-out'),\n\t'quintInOut': require('./quint-in-out'),\n\t'quintIn': require('./quint-in'),\n\t'quintOut': require('./quint-out'),\n\t'sineInOut': require('./sine-in-out'),\n\t'sineIn': require('./sine-in'),\n\t'sineOut': require('./sine-out')\n}","function linear(t) {\n  return t\n}\n\nmodule.exports = linear","function quadInOut(t) {\n    t /= 0.5\n    if (t < 1) return 0.5*t*t\n    t--\n    return -0.5 * (t*(t-2) - 1)\n}\n\nmodule.exports = quadInOut","function quadIn(t) {\n  return t * t\n}\n\nmodule.exports = quadIn","function quadOut(t) {\n  return -t * (t - 2.0)\n}\n\nmodule.exports = quadOut","function quarticInOut(t) {\n  return t < 0.5\n    ? +8.0 * Math.pow(t, 4.0)\n    : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0\n}\n\nmodule.exports = quarticInOut","function quarticIn(t) {\n  return Math.pow(t, 4.0)\n}\n\nmodule.exports = quarticIn","function quarticOut(t) {\n  return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0\n}\n\nmodule.exports = quarticOut","function qinticInOut(t) {\n    if ( ( t *= 2 ) < 1 ) return 0.5 * t * t * t * t * t\n    return 0.5 * ( ( t -= 2 ) * t * t * t * t + 2 )\n}\n\nmodule.exports = qinticInOut","function qinticIn(t) {\n  return t * t * t * t * t\n}\n\nmodule.exports = qinticIn","function qinticOut(t) {\n  return --t * t * t * t * t + 1\n}\n\nmodule.exports = qinticOut","function sineInOut(t) {\n  return -0.5 * (Math.cos(Math.PI*t) - 1)\n}\n\nmodule.exports = sineInOut","function sineIn (t) {\n  var v = Math.cos(t * Math.PI * 0.5)\n  if (Math.abs(v) < 1e-14) return 1\n  else return 1 - v\n}\n\nmodule.exports = sineIn\n","function sineOut(t) {\n  return Math.sin(t * Math.PI/2)\n}\n\nmodule.exports = sineOut","module.exports=[[\"#69d2e7\",\"#a7dbd8\",\"#e0e4cc\",\"#f38630\",\"#fa6900\"],[\"#fe4365\",\"#fc9d9a\",\"#f9cdad\",\"#c8c8a9\",\"#83af9b\"],[\"#ecd078\",\"#d95b43\",\"#c02942\",\"#542437\",\"#53777a\"],[\"#556270\",\"#4ecdc4\",\"#c7f464\",\"#ff6b6b\",\"#c44d58\"],[\"#774f38\",\"#e08e79\",\"#f1d4af\",\"#ece5ce\",\"#c5e0dc\"],[\"#e8ddcb\",\"#cdb380\",\"#036564\",\"#033649\",\"#031634\"],[\"#490a3d\",\"#bd1550\",\"#e97f02\",\"#f8ca00\",\"#8a9b0f\"],[\"#594f4f\",\"#547980\",\"#45ada8\",\"#9de0ad\",\"#e5fcc2\"],[\"#00a0b0\",\"#6a4a3c\",\"#cc333f\",\"#eb6841\",\"#edc951\"],[\"#e94e77\",\"#d68189\",\"#c6a49a\",\"#c6e5d9\",\"#f4ead5\"],[\"#3fb8af\",\"#7fc7af\",\"#dad8a7\",\"#ff9e9d\",\"#ff3d7f\"],[\"#d9ceb2\",\"#948c75\",\"#d5ded9\",\"#7a6a53\",\"#99b2b7\"],[\"#ffffff\",\"#cbe86b\",\"#f2e9e1\",\"#1c140d\",\"#cbe86b\"],[\"#efffcd\",\"#dce9be\",\"#555152\",\"#2e2633\",\"#99173c\"],[\"#343838\",\"#005f6b\",\"#008c9e\",\"#00b4cc\",\"#00dffc\"],[\"#413e4a\",\"#73626e\",\"#b38184\",\"#f0b49e\",\"#f7e4be\"],[\"#ff4e50\",\"#fc913a\",\"#f9d423\",\"#ede574\",\"#e1f5c4\"],[\"#99b898\",\"#fecea8\",\"#ff847c\",\"#e84a5f\",\"#2a363b\"],[\"#655643\",\"#80bca3\",\"#f6f7bd\",\"#e6ac27\",\"#bf4d28\"],[\"#00a8c6\",\"#40c0cb\",\"#f9f2e7\",\"#aee239\",\"#8fbe00\"],[\"#351330\",\"#424254\",\"#64908a\",\"#e8caa4\",\"#cc2a41\"],[\"#554236\",\"#f77825\",\"#d3ce3d\",\"#f1efa5\",\"#60b99a\"],[\"#5d4157\",\"#838689\",\"#a8caba\",\"#cad7b2\",\"#ebe3aa\"],[\"#8c2318\",\"#5e8c6a\",\"#88a65e\",\"#bfb35a\",\"#f2c45a\"],[\"#fad089\",\"#ff9c5b\",\"#f5634a\",\"#ed303c\",\"#3b8183\"],[\"#ff4242\",\"#f4fad2\",\"#d4ee5e\",\"#e1edb9\",\"#f0f2eb\"],[\"#f8b195\",\"#f67280\",\"#c06c84\",\"#6c5b7b\",\"#355c7d\"],[\"#d1e751\",\"#ffffff\",\"#000000\",\"#4dbce9\",\"#26ade4\"],[\"#1b676b\",\"#519548\",\"#88c425\",\"#bef202\",\"#eafde6\"],[\"#5e412f\",\"#fcebb6\",\"#78c0a8\",\"#f07818\",\"#f0a830\"],[\"#bcbdac\",\"#cfbe27\",\"#f27435\",\"#f02475\",\"#3b2d38\"],[\"#452632\",\"#91204d\",\"#e4844a\",\"#e8bf56\",\"#e2f7ce\"],[\"#eee6ab\",\"#c5bc8e\",\"#696758\",\"#45484b\",\"#36393b\"],[\"#f0d8a8\",\"#3d1c00\",\"#86b8b1\",\"#f2d694\",\"#fa2a00\"],[\"#2a044a\",\"#0b2e59\",\"#0d6759\",\"#7ab317\",\"#a0c55f\"],[\"#f04155\",\"#ff823a\",\"#f2f26f\",\"#fff7bd\",\"#95cfb7\"],[\"#b9d7d9\",\"#668284\",\"#2a2829\",\"#493736\",\"#7b3b3b\"],[\"#bbbb88\",\"#ccc68d\",\"#eedd99\",\"#eec290\",\"#eeaa88\"],[\"#b3cc57\",\"#ecf081\",\"#ffbe40\",\"#ef746f\",\"#ab3e5b\"],[\"#a3a948\",\"#edb92e\",\"#f85931\",\"#ce1836\",\"#009989\"],[\"#300030\",\"#480048\",\"#601848\",\"#c04848\",\"#f07241\"],[\"#67917a\",\"#170409\",\"#b8af03\",\"#ccbf82\",\"#e33258\"],[\"#aab3ab\",\"#c4cbb7\",\"#ebefc9\",\"#eee0b7\",\"#e8caaf\"],[\"#e8d5b7\",\"#0e2430\",\"#fc3a51\",\"#f5b349\",\"#e8d5b9\"],[\"#ab526b\",\"#bca297\",\"#c5ceae\",\"#f0e2a4\",\"#f4ebc3\"],[\"#607848\",\"#789048\",\"#c0d860\",\"#f0f0d8\",\"#604848\"],[\"#b6d8c0\",\"#c8d9bf\",\"#dadabd\",\"#ecdbbc\",\"#fedcba\"],[\"#a8e6ce\",\"#dcedc2\",\"#ffd3b5\",\"#ffaaa6\",\"#ff8c94\"],[\"#3e4147\",\"#fffedf\",\"#dfba69\",\"#5a2e2e\",\"#2a2c31\"],[\"#fc354c\",\"#29221f\",\"#13747d\",\"#0abfbc\",\"#fcf7c5\"],[\"#cc0c39\",\"#e6781e\",\"#c8cf02\",\"#f8fcc1\",\"#1693a7\"],[\"#1c2130\",\"#028f76\",\"#b3e099\",\"#ffeaad\",\"#d14334\"],[\"#a7c5bd\",\"#e5ddcb\",\"#eb7b59\",\"#cf4647\",\"#524656\"],[\"#dad6ca\",\"#1bb0ce\",\"#4f8699\",\"#6a5e72\",\"#563444\"],[\"#5c323e\",\"#a82743\",\"#e15e32\",\"#c0d23e\",\"#e5f04c\"],[\"#edebe6\",\"#d6e1c7\",\"#94c7b6\",\"#403b33\",\"#d3643b\"],[\"#fdf1cc\",\"#c6d6b8\",\"#987f69\",\"#e3ad40\",\"#fcd036\"],[\"#230f2b\",\"#f21d41\",\"#ebebbc\",\"#bce3c5\",\"#82b3ae\"],[\"#b9d3b0\",\"#81bda4\",\"#b28774\",\"#f88f79\",\"#f6aa93\"],[\"#3a111c\",\"#574951\",\"#83988e\",\"#bcdea5\",\"#e6f9bc\"],[\"#5e3929\",\"#cd8c52\",\"#b7d1a3\",\"#dee8be\",\"#fcf7d3\"],[\"#1c0113\",\"#6b0103\",\"#a30006\",\"#c21a01\",\"#f03c02\"],[\"#000000\",\"#9f111b\",\"#b11623\",\"#292c37\",\"#cccccc\"],[\"#382f32\",\"#ffeaf2\",\"#fcd9e5\",\"#fbc5d8\",\"#f1396d\"],[\"#e3dfba\",\"#c8d6bf\",\"#93ccc6\",\"#6cbdb5\",\"#1a1f1e\"],[\"#f6f6f6\",\"#e8e8e8\",\"#333333\",\"#990100\",\"#b90504\"],[\"#1b325f\",\"#9cc4e4\",\"#e9f2f9\",\"#3a89c9\",\"#f26c4f\"],[\"#a1dbb2\",\"#fee5ad\",\"#faca66\",\"#f7a541\",\"#f45d4c\"],[\"#c1b398\",\"#605951\",\"#fbeec2\",\"#61a6ab\",\"#accec0\"],[\"#5e9fa3\",\"#dcd1b4\",\"#fab87f\",\"#f87e7b\",\"#b05574\"],[\"#951f2b\",\"#f5f4d7\",\"#e0dfb1\",\"#a5a36c\",\"#535233\"],[\"#8dccad\",\"#988864\",\"#fea6a2\",\"#f9d6ac\",\"#ffe9af\"],[\"#2d2d29\",\"#215a6d\",\"#3ca2a2\",\"#92c7a3\",\"#dfece6\"],[\"#413d3d\",\"#040004\",\"#c8ff00\",\"#fa023c\",\"#4b000f\"],[\"#eff3cd\",\"#b2d5ba\",\"#61ada0\",\"#248f8d\",\"#605063\"],[\"#ffefd3\",\"#fffee4\",\"#d0ecea\",\"#9fd6d2\",\"#8b7a5e\"],[\"#cfffdd\",\"#b4dec1\",\"#5c5863\",\"#a85163\",\"#ff1f4c\"],[\"#9dc9ac\",\"#fffec7\",\"#f56218\",\"#ff9d2e\",\"#919167\"],[\"#4e395d\",\"#827085\",\"#8ebe94\",\"#ccfc8e\",\"#dc5b3e\"],[\"#a8a7a7\",\"#cc527a\",\"#e8175d\",\"#474747\",\"#363636\"],[\"#f8edd1\",\"#d88a8a\",\"#474843\",\"#9d9d93\",\"#c5cfc6\"],[\"#046d8b\",\"#309292\",\"#2fb8ac\",\"#93a42a\",\"#ecbe13\"],[\"#f38a8a\",\"#55443d\",\"#a0cab5\",\"#cde9ca\",\"#f1edd0\"],[\"#a70267\",\"#f10c49\",\"#fb6b41\",\"#f6d86b\",\"#339194\"],[\"#ff003c\",\"#ff8a00\",\"#fabe28\",\"#88c100\",\"#00c176\"],[\"#ffedbf\",\"#f7803c\",\"#f54828\",\"#2e0d23\",\"#f8e4c1\"],[\"#4e4d4a\",\"#353432\",\"#94ba65\",\"#2790b0\",\"#2b4e72\"],[\"#0ca5b0\",\"#4e3f30\",\"#fefeeb\",\"#f8f4e4\",\"#a5b3aa\"],[\"#4d3b3b\",\"#de6262\",\"#ffb88c\",\"#ffd0b3\",\"#f5e0d3\"],[\"#fffbb7\",\"#a6f6af\",\"#66b6ab\",\"#5b7c8d\",\"#4f2958\"],[\"#edf6ee\",\"#d1c089\",\"#b3204d\",\"#412e28\",\"#151101\"],[\"#9d7e79\",\"#ccac95\",\"#9a947c\",\"#748b83\",\"#5b756c\"],[\"#fcfef5\",\"#e9ffe1\",\"#cdcfb7\",\"#d6e6c3\",\"#fafbe3\"],[\"#9cddc8\",\"#bfd8ad\",\"#ddd9ab\",\"#f7af63\",\"#633d2e\"],[\"#30261c\",\"#403831\",\"#36544f\",\"#1f5f61\",\"#0b8185\"],[\"#aaff00\",\"#ffaa00\",\"#ff00aa\",\"#aa00ff\",\"#00aaff\"],[\"#d1313d\",\"#e5625c\",\"#f9bf76\",\"#8eb2c5\",\"#615375\"],[\"#ffe181\",\"#eee9e5\",\"#fad3b2\",\"#ffba7f\",\"#ff9c97\"],[\"#73c8a9\",\"#dee1b6\",\"#e1b866\",\"#bd5532\",\"#373b44\"],[\"#805841\",\"#dcf7f3\",\"#fffcdd\",\"#ffd8d8\",\"#f5a2a2\"]]","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\tvar runtime = function (exports) {\n\n\t\tvar Op = Object.prototype;\n\t\tvar hasOwn = Op.hasOwnProperty;\n\t\tvar undefined$1; // More compressible than void 0.\n\n\t\tvar $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t\tvar iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t\tvar asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t\tvar toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n\t\tfunction define(obj, key, value) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tvalue: value,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t\treturn obj[key];\n\t\t}\n\n\t\ttry {\n\t\t\t// IE 8 has a broken Object.defineProperty that only works on DOM objects.\n\t\t\tdefine({}, \"\");\n\t\t} catch (err) {\n\t\t\tdefine = function define(obj, key, value) {\n\t\t\t\treturn obj[key] = value;\n\t\t\t};\n\t\t}\n\n\t\tfunction wrap(innerFn, outerFn, self, tryLocsList) {\n\t\t\t// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t\t\tvar protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t\t\tvar generator = Object.create(protoGenerator.prototype);\n\t\t\tvar context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n\t\t\t// .throw, and .return methods.\n\n\t\t\tgenerator._invoke = makeInvokeMethod(innerFn, self, context);\n\t\t\treturn generator;\n\t\t}\n\n\t\texports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n\t\t// record like context.tryEntries[i].completion. This interface could\n\t\t// have been (and was previously) designed to take a closure to be\n\t\t// invoked without arguments, but in all the cases we care about we\n\t\t// already have an existing method we want to call, so there's no need\n\t\t// to create a new function object. We can even get away with assuming\n\t\t// the method takes exactly one argument, since that happens to be true\n\t\t// in every case, so we don't have to touch the arguments object. The\n\t\t// only additional allocation required is the completion record, which\n\t\t// has a stable shape and so hopefully should be cheap to allocate.\n\n\t\tfunction tryCatch(fn, obj, arg) {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"normal\",\n\t\t\t\t\targ: fn.call(obj, arg)\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"throw\",\n\t\t\t\t\targ: err\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tvar GenStateSuspendedStart = \"suspendedStart\";\n\t\tvar GenStateSuspendedYield = \"suspendedYield\";\n\t\tvar GenStateExecuting = \"executing\";\n\t\tvar GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n\t\t// breaking out of the dispatch switch statement.\n\n\t\tvar ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n\t\t// .constructor.prototype properties for functions that return Generator\n\t\t// objects. For full spec compliance, you may wish to configure your\n\t\t// minifier not to mangle the names of these two functions.\n\n\t\tfunction Generator() {}\n\n\t\tfunction GeneratorFunction() {}\n\n\t\tfunction GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n\t\t// don't natively support it.\n\n\n\t\tvar IteratorPrototype = {};\n\n\t\tIteratorPrototype[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tvar getProto = Object.getPrototypeOf;\n\t\tvar NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n\t\tif (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t\t\t// This environment has a native %IteratorPrototype%; use it instead\n\t\t\t// of the polyfill.\n\t\t\tIteratorPrototype = NativeIteratorPrototype;\n\t\t}\n\n\t\tvar Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\t\tGeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t\tGeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t\tGeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n\t\t// Iterator interface in terms of a single ._invoke method.\n\n\t\tfunction defineIteratorMethods(prototype) {\n\t\t\t[\"next\", \"throw\", \"return\"].forEach(function (method) {\n\t\t\t\tdefine(prototype, method, function (arg) {\n\t\t\t\t\treturn this._invoke(method, arg);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\texports.isGeneratorFunction = function (genFun) {\n\t\t\tvar ctor = typeof genFun === \"function\" && genFun.constructor;\n\t\t\treturn ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n\t\t\t// do is to check its .name property.\n\t\t\t(ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n\t\t};\n\n\t\texports.mark = function (genFun) {\n\t\t\tif (Object.setPrototypeOf) {\n\t\t\t\tObject.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t\t\t} else {\n\t\t\t\tgenFun.__proto__ = GeneratorFunctionPrototype;\n\t\t\t\tdefine(genFun, toStringTagSymbol, \"GeneratorFunction\");\n\t\t\t}\n\n\t\t\tgenFun.prototype = Object.create(Gp);\n\t\t\treturn genFun;\n\t\t}; // Within the body of any async function, `await x` is transformed to\n\t\t// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t\t// `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t\t// meant to be awaited.\n\n\n\t\texports.awrap = function (arg) {\n\t\t\treturn {\n\t\t\t\t__await: arg\n\t\t\t};\n\t\t};\n\n\t\tfunction AsyncIterator(generator, PromiseImpl) {\n\t\t\tfunction invoke(method, arg, resolve, reject) {\n\t\t\t\tvar record = tryCatch(generator[method], generator, arg);\n\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\treject(record.arg);\n\t\t\t\t} else {\n\t\t\t\t\tvar result = record.arg;\n\t\t\t\t\tvar value = result.value;\n\n\t\t\t\t\tif (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n\t\t\t\t\t\treturn PromiseImpl.resolve(value.__await).then(function (value) {\n\t\t\t\t\t\t\tinvoke(\"next\", value, resolve, reject);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tinvoke(\"throw\", err, resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn PromiseImpl.resolve(value).then(function (unwrapped) {\n\t\t\t\t\t\t// When a yielded Promise is resolved, its final value becomes\n\t\t\t\t\t\t// the .value of the Promise<{value,done}> result for the\n\t\t\t\t\t\t// current iteration.\n\t\t\t\t\t\tresult.value = unwrapped;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}, function (error) {\n\t\t\t\t\t\t// If a rejected Promise was yielded, throw the rejection back\n\t\t\t\t\t\t// into the async generator function so it can be handled there.\n\t\t\t\t\t\treturn invoke(\"throw\", error, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar previousPromise;\n\n\t\t\tfunction enqueue(method, arg) {\n\t\t\t\tfunction callInvokeWithMethodAndArg() {\n\t\t\t\t\treturn new PromiseImpl(function (resolve, reject) {\n\t\t\t\t\t\tinvoke(method, arg, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn previousPromise = // If enqueue has been called before, then we want to wait until\n\t\t\t\t// all previous Promises have been resolved before calling invoke,\n\t\t\t\t// so that results are always delivered in the correct order. If\n\t\t\t\t// enqueue has not been called before, then it is important to\n\t\t\t\t// call invoke immediately, without waiting on a callback to fire,\n\t\t\t\t// so that the async generator function has the opportunity to do\n\t\t\t\t// any necessary setup in a predictable way. This predictability\n\t\t\t\t// is why the Promise constructor synchronously invokes its\n\t\t\t\t// executor callback, and why async functions synchronously\n\t\t\t\t// execute code before the first await. Since we implement simple\n\t\t\t\t// async functions in terms of async generators, it is especially\n\t\t\t\t// important to get this right, even though it requires care.\n\t\t\t\tpreviousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n\t\t\t\t// invocations of the iterator.\n\t\t\t\tcallInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n\t\t\t} // Define the unified helper method that is used to implement .next,\n\t\t\t// .throw, and .return (see defineIteratorMethods).\n\n\n\t\t\tthis._invoke = enqueue;\n\t\t}\n\n\t\tdefineIteratorMethods(AsyncIterator.prototype);\n\n\t\tAsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\texports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n\t\t// AsyncIterator objects; they just return a Promise for the value of\n\t\t// the final result produced by the iterator.\n\n\t\texports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n\t\t\tif (PromiseImpl === void 0) PromiseImpl = Promise;\n\t\t\tvar iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n\t\t\treturn exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n\t\t\t: iter.next().then(function (result) {\n\t\t\t\treturn result.done ? result.value : iter.next();\n\t\t\t});\n\t\t};\n\n\t\tfunction makeInvokeMethod(innerFn, self, context) {\n\t\t\tvar state = GenStateSuspendedStart;\n\t\t\treturn function invoke(method, arg) {\n\t\t\t\tif (state === GenStateExecuting) {\n\t\t\t\t\tthrow new Error(\"Generator is already running\");\n\t\t\t\t}\n\n\t\t\t\tif (state === GenStateCompleted) {\n\t\t\t\t\tif (method === \"throw\") {\n\t\t\t\t\t\tthrow arg;\n\t\t\t\t\t} // Be forgiving, per 25.3.3.3.3 of the spec:\n\t\t\t\t\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n\t\t\t\t\treturn doneResult();\n\t\t\t\t}\n\n\t\t\t\tcontext.method = method;\n\t\t\t\tcontext.arg = arg;\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar delegate = context.delegate;\n\n\t\t\t\t\tif (delegate) {\n\t\t\t\t\t\tvar delegateResult = maybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (delegateResult) {\n\t\t\t\t\t\t\tif (delegateResult === ContinueSentinel) continue;\n\t\t\t\t\t\t\treturn delegateResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.method === \"next\") {\n\t\t\t\t\t\t// Setting context._sent for legacy support of Babel's\n\t\t\t\t\t\t// function.sent implementation.\n\t\t\t\t\t\tcontext.sent = context._sent = context.arg;\n\t\t\t\t\t} else if (context.method === \"throw\") {\n\t\t\t\t\t\tif (state === GenStateSuspendedStart) {\n\t\t\t\t\t\t\tstate = GenStateCompleted;\n\t\t\t\t\t\t\tthrow context.arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontext.dispatchException(context.arg);\n\t\t\t\t\t} else if (context.method === \"return\") {\n\t\t\t\t\t\tcontext.abrupt(\"return\", context.arg);\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = GenStateExecuting;\n\t\t\t\t\tvar record = tryCatch(innerFn, self, context);\n\n\t\t\t\t\tif (record.type === \"normal\") {\n\t\t\t\t\t\t// If an exception is thrown from innerFn, we leave state ===\n\t\t\t\t\t\t// GenStateExecuting and loop back for another invocation.\n\t\t\t\t\t\tstate = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n\t\t\t\t\t\tif (record.arg === ContinueSentinel) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: record.arg,\n\t\t\t\t\t\t\tdone: context.done\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (record.type === \"throw\") {\n\t\t\t\t\t\tstate = GenStateCompleted; // Dispatch the exception by looping back around to the\n\t\t\t\t\t\t// context.dispatchException(context.arg) call above.\n\n\t\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\t\tcontext.arg = record.arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t} // Call delegate.iterator[context.method](context.arg) and handle the\n\t\t// result, either by returning a { value, done } result from the\n\t\t// delegate iterator, or by modifying context.method and context.arg,\n\t\t// setting context.delegate to null, and returning the ContinueSentinel.\n\n\n\t\tfunction maybeInvokeDelegate(delegate, context) {\n\t\t\tvar method = delegate.iterator[context.method];\n\n\t\t\tif (method === undefined$1) {\n\t\t\t\t// A .throw or .return when the delegate iterator has no .throw\n\t\t\t\t// method always terminates the yield* loop.\n\t\t\t\tcontext.delegate = null;\n\n\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t// Note: [\"return\"] must be used for ES3 parsing compatibility.\n\t\t\t\t\tif (delegate.iterator[\"return\"]) {\n\t\t\t\t\t\t// If the delegate iterator has a return method, give it a\n\t\t\t\t\t\t// chance to clean up.\n\t\t\t\t\t\tcontext.method = \"return\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t\tmaybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t\t\t// If maybeInvokeDelegate(context) changed context.method from\n\t\t\t\t\t\t\t// \"return\" to \"throw\", let that override the TypeError below.\n\t\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\tcontext.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar record = tryCatch(method, delegate.iterator, context.arg);\n\n\t\t\tif (record.type === \"throw\") {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = record.arg;\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar info = record.arg;\n\n\t\t\tif (!info) {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = new TypeError(\"iterator result is not an object\");\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tif (info.done) {\n\t\t\t\t// Assign the result of the finished delegate to the temporary\n\t\t\t\t// variable specified by delegate.resultName (see delegateYield).\n\t\t\t\tcontext[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n\t\t\t\tcontext.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n\t\t\t\t// exception, let the outer generator proceed normally. If\n\t\t\t\t// context.method was \"next\", forget context.arg since it has been\n\t\t\t\t// \"consumed\" by the delegate iterator. If context.method was\n\t\t\t\t// \"return\", allow the original .return call to continue in the\n\t\t\t\t// outer generator.\n\n\t\t\t\tif (context.method !== \"return\") {\n\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Re-yield the result returned by the delegate method.\n\t\t\t\treturn info;\n\t\t\t} // The delegate iterator is finished, so forget it and continue with\n\t\t\t// the outer generator.\n\n\n\t\t\tcontext.delegate = null;\n\t\t\treturn ContinueSentinel;\n\t\t} // Define Generator.prototype.{next,throw,return} in terms of the\n\t\t// unified ._invoke helper method.\n\n\n\t\tdefineIteratorMethods(Gp);\n\t\tdefine(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n\t\t// @@iterator function is called on it. Some browsers' implementations of the\n\t\t// iterator prototype chain incorrectly implement this, causing the Generator\n\t\t// object to not be returned from this call. This ensures that doesn't happen.\n\t\t// See https://github.com/facebook/regenerator/issues/274 for more details.\n\n\t\tGp[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tGp.toString = function () {\n\t\t\treturn \"[object Generator]\";\n\t\t};\n\n\t\tfunction pushTryEntry(locs) {\n\t\t\tvar entry = {\n\t\t\t\ttryLoc: locs[0]\n\t\t\t};\n\n\t\t\tif (1 in locs) {\n\t\t\t\tentry.catchLoc = locs[1];\n\t\t\t}\n\n\t\t\tif (2 in locs) {\n\t\t\t\tentry.finallyLoc = locs[2];\n\t\t\t\tentry.afterLoc = locs[3];\n\t\t\t}\n\n\t\t\tthis.tryEntries.push(entry);\n\t\t}\n\n\t\tfunction resetTryEntry(entry) {\n\t\t\tvar record = entry.completion || {};\n\t\t\trecord.type = \"normal\";\n\t\t\tdelete record.arg;\n\t\t\tentry.completion = record;\n\t\t}\n\n\t\tfunction Context(tryLocsList) {\n\t\t\t// The root entry object (effectively a try statement without a catch\n\t\t\t// or a finally block) gives us a place to store values thrown from\n\t\t\t// locations where there is no enclosing try statement.\n\t\t\tthis.tryEntries = [{\n\t\t\t\ttryLoc: \"root\"\n\t\t\t}];\n\t\t\ttryLocsList.forEach(pushTryEntry, this);\n\t\t\tthis.reset(true);\n\t\t}\n\n\t\texports.keys = function (object) {\n\t\t\tvar keys = [];\n\n\t\t\tfor (var key in object) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\n\t\t\tkeys.reverse(); // Rather than returning an object with a next method, we keep\n\t\t\t// things simple and return the next function itself.\n\n\t\t\treturn function next() {\n\t\t\t\twhile (keys.length) {\n\t\t\t\t\tvar key = keys.pop();\n\n\t\t\t\t\tif (key in object) {\n\t\t\t\t\t\tnext.value = key;\n\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t}\n\t\t\t\t} // To avoid creating an additional object, we just hang the .value\n\t\t\t\t// and .done properties off the next function object itself. This\n\t\t\t\t// also ensures that the minifier will not anonymize the function.\n\n\n\t\t\t\tnext.done = true;\n\t\t\t\treturn next;\n\t\t\t};\n\t\t};\n\n\t\tfunction values(iterable) {\n\t\t\tif (iterable) {\n\t\t\t\tvar iteratorMethod = iterable[iteratorSymbol];\n\n\t\t\t\tif (iteratorMethod) {\n\t\t\t\t\treturn iteratorMethod.call(iterable);\n\t\t\t\t}\n\n\t\t\t\tif (typeof iterable.next === \"function\") {\n\t\t\t\t\treturn iterable;\n\t\t\t\t}\n\n\t\t\t\tif (!isNaN(iterable.length)) {\n\t\t\t\t\tvar i = -1,\n\t\t\t\t\t\t\tnext = function next() {\n\t\t\t\t\t\twhile (++i < iterable.length) {\n\t\t\t\t\t\t\tif (hasOwn.call(iterable, i)) {\n\t\t\t\t\t\t\t\tnext.value = iterable[i];\n\t\t\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext.value = undefined$1;\n\t\t\t\t\t\tnext.done = true;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t};\n\n\t\t\t\t\treturn next.next = next;\n\t\t\t\t}\n\t\t\t} // Return an iterator with no values.\n\n\n\t\t\treturn {\n\t\t\t\tnext: doneResult\n\t\t\t};\n\t\t}\n\n\t\texports.values = values;\n\n\t\tfunction doneResult() {\n\t\t\treturn {\n\t\t\t\tvalue: undefined$1,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tContext.prototype = {\n\t\t\tconstructor: Context,\n\t\t\treset: function reset(skipTempReset) {\n\t\t\t\tthis.prev = 0;\n\t\t\t\tthis.next = 0; // Resetting context._sent for legacy support of Babel's\n\t\t\t\t// function.sent implementation.\n\n\t\t\t\tthis.sent = this._sent = undefined$1;\n\t\t\t\tthis.done = false;\n\t\t\t\tthis.delegate = null;\n\t\t\t\tthis.method = \"next\";\n\t\t\t\tthis.arg = undefined$1;\n\t\t\t\tthis.tryEntries.forEach(resetTryEntry);\n\n\t\t\t\tif (!skipTempReset) {\n\t\t\t\t\tfor (var name in this) {\n\t\t\t\t\t\t// Not sure about the optimal order of these conditions:\n\t\t\t\t\t\tif (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n\t\t\t\t\t\t\tthis[name] = undefined$1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tthis.done = true;\n\t\t\t\tvar rootEntry = this.tryEntries[0];\n\t\t\t\tvar rootRecord = rootEntry.completion;\n\n\t\t\t\tif (rootRecord.type === \"throw\") {\n\t\t\t\t\tthrow rootRecord.arg;\n\t\t\t\t}\n\n\t\t\t\treturn this.rval;\n\t\t\t},\n\t\t\tdispatchException: function dispatchException(exception) {\n\t\t\t\tif (this.done) {\n\t\t\t\t\tthrow exception;\n\t\t\t\t}\n\n\t\t\t\tvar context = this;\n\n\t\t\t\tfunction handle(loc, caught) {\n\t\t\t\t\trecord.type = \"throw\";\n\t\t\t\t\trecord.arg = exception;\n\t\t\t\t\tcontext.next = loc;\n\n\t\t\t\t\tif (caught) {\n\t\t\t\t\t\t// If the dispatched exception was caught by a catch block,\n\t\t\t\t\t\t// then let that catch block handle the exception normally.\n\t\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !!caught;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\tif (entry.tryLoc === \"root\") {\n\t\t\t\t\t\t// Exception thrown outside of any try block that could handle\n\t\t\t\t\t\t// it, so set the completion value of the entire function to\n\t\t\t\t\t\t// throw the exception.\n\t\t\t\t\t\treturn handle(\"end\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev) {\n\t\t\t\t\t\tvar hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t\t\t\t\t\tvar hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t\t\t\t\t\tif (hasCatch && hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t} else if (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasCatch) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(\"try statement without catch or finally\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tabrupt: function abrupt(type, arg) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n\t\t\t\t\t\tvar finallyEntry = entry;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n\t\t\t\t\t// Ignore the finally entry if control is not jumping to a\n\t\t\t\t\t// location outside the try/catch block.\n\t\t\t\t\tfinallyEntry = null;\n\t\t\t\t}\n\n\t\t\t\tvar record = finallyEntry ? finallyEntry.completion : {};\n\t\t\t\trecord.type = type;\n\t\t\t\trecord.arg = arg;\n\n\t\t\t\tif (finallyEntry) {\n\t\t\t\t\tthis.method = \"next\";\n\t\t\t\t\tthis.next = finallyEntry.finallyLoc;\n\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t}\n\n\t\t\t\treturn this.complete(record);\n\t\t\t},\n\t\t\tcomplete: function complete(record, afterLoc) {\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\tthrow record.arg;\n\t\t\t\t}\n\n\t\t\t\tif (record.type === \"break\" || record.type === \"continue\") {\n\t\t\t\t\tthis.next = record.arg;\n\t\t\t\t} else if (record.type === \"return\") {\n\t\t\t\t\tthis.rval = this.arg = record.arg;\n\t\t\t\t\tthis.method = \"return\";\n\t\t\t\t\tthis.next = \"end\";\n\t\t\t\t} else if (record.type === \"normal\" && afterLoc) {\n\t\t\t\t\tthis.next = afterLoc;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t},\n\t\t\tfinish: function finish(finallyLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.finallyLoc === finallyLoc) {\n\t\t\t\t\t\tthis.complete(entry.completion, entry.afterLoc);\n\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"catch\": function _catch(tryLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc === tryLoc) {\n\t\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\t\t\tvar thrown = record.arg;\n\t\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn thrown;\n\t\t\t\t\t}\n\t\t\t\t} // The context.catch method must only be called with a location\n\t\t\t\t// argument that corresponds to a known catch block.\n\n\n\t\t\t\tthrow new Error(\"illegal catch attempt\");\n\t\t\t},\n\t\t\tdelegateYield: function delegateYield(iterable, resultName, nextLoc) {\n\t\t\t\tthis.delegate = {\n\t\t\t\t\titerator: values(iterable),\n\t\t\t\t\tresultName: resultName,\n\t\t\t\t\tnextLoc: nextLoc\n\t\t\t\t};\n\n\t\t\t\tif (this.method === \"next\") {\n\t\t\t\t\t// Deliberately forget the last sent value so that we don't\n\t\t\t\t\t// accidentally pass it on to the delegate.\n\t\t\t\t\tthis.arg = undefined$1;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\t\t}; // Regardless of whether this script is executing as a CommonJS module\n\t\t// or not, return the runtime object so that we can declare the variable\n\t\t// regeneratorRuntime in the outer scope, which allows this module to be\n\t\t// injected easily by `bin/regenerator --include-runtime script.js`.\n\n\t\treturn exports;\n\t}( // If this script is executing as a CommonJS module, use module.exports\n\t// as the regeneratorRuntime namespace. Otherwise create a new empty\n\t// object. Either way, the resulting object will be used to initialize\n\t// the regeneratorRuntime variable at the top of this file.\n\ttypeof module === \"object\" ? module.exports : {});\n\n\ttry {\n\t\tregeneratorRuntime = runtime;\n\t} catch (accidentalStrictMode) {\n\t\t// This module should not be running in strict mode, so the above\n\t\t// assignment should always work unless something is misconfigured. Just\n\t\t// in case runtime.js accidentally runs in strict mode, we can escape\n\t\t// strict mode using a global Function call. This could conceivably fail\n\t\t// if a Content Security Policy forbids using Function, but in that case\n\t\t// the proper solution is to fix the accidental strict mode problem. If\n\t\t// you've misconfigured your bundler to force strict mode and applied a\n\t\t// CSP to forbid Function, and you're not willing to fix either of those\n\t\t// problems, please detail your unique predicament in a GitHub issue.\n\t\tFunction(\"r\", \"regeneratorRuntime = r\")(runtime);\n\t}\n\n\tvar REVISION = '126';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = '100';\n\tvar GLSL3 = '300 es';\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t\ttry {\n\t\t\tvar info = gen[key](arg);\n\t\t\tvar value = info.value;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (info.done) {\n\t\t\tresolve(value);\n\t\t} else {\n\t\t\tPromise.resolve(value).then(_next, _throw);\n\t\t}\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t\treturn function () {\n\t\t\tvar self = this,\n\t\t\t\t\targs = arguments;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tvar gen = fn.apply(self, args);\n\n\t\t\t\tfunction _next(value) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t\t\t\t}\n\n\t\t\t\tfunction _throw(err) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t\t\t\t}\n\n\t\t\t\t_next(undefined);\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\n\t\t_setPrototypeOf(subClass, superClass);\n\t}\n\n\tfunction _setPrototypeOf(o, p) {\n\t\t_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n\t\t\to.__proto__ = p;\n\t\t\treturn o;\n\t\t};\n\n\t\treturn _setPrototypeOf(o, p);\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t\tif (!o) return;\n\t\tif (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t\tvar n = Object.prototype.toString.call(o).slice(8, -1);\n\t\tif (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t\tif (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t\tif (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t\tif (len == null || len > arr.length) len = arr.length;\n\n\t\tfor (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t\treturn arr2;\n\t}\n\n\tfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n\t\tvar it;\n\n\t\tif (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n\t\t\tif (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n\t\t\t\tif (it) o = it;\n\t\t\t\tvar i = 0;\n\t\t\t\treturn function () {\n\t\t\t\t\tif (i >= o.length) return {\n\t\t\t\t\t\tdone: true\n\t\t\t\t\t};\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: o[i++]\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t\t}\n\n\t\tit = o[Symbol.iterator]();\n\t\treturn it.next.bind(it);\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\t\tdamp: function damp(x, y, lambda, dt) {\n\t\t\treturn MathUtils.lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t\t},\n\t\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\t\tpingpong: function pingpong(x, length) {\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\treturn length - Math.abs(MathUtils.euclideanModulo(x, length * 2) - length);\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tVector2.prototype.isVector2 = true;\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn12 = te[3],\n\t\t\t\t\tn22 = te[4],\n\t\t\t\t\tn32 = te[5],\n\t\t\t\t\tn13 = te[6],\n\t\t\t\t\tn23 = te[7],\n\t\t\t\t\tn33 = te[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tvar Texture = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(Texture, _EventDispatcher);\n\n\t\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\tif (image === void 0) {\n\t\t\t\timage = Texture.DEFAULT_IMAGE;\n\t\t\t}\n\n\t\t\tif (mapping === void 0) {\n\t\t\t\tmapping = Texture.DEFAULT_MAPPING;\n\t\t\t}\n\n\t\t\tif (wrapS === void 0) {\n\t\t\t\twrapS = ClampToEdgeWrapping;\n\t\t\t}\n\n\t\t\tif (wrapT === void 0) {\n\t\t\t\twrapT = ClampToEdgeWrapping;\n\t\t\t}\n\n\t\t\tif (magFilter === void 0) {\n\t\t\t\tmagFilter = LinearFilter;\n\t\t\t}\n\n\t\t\tif (minFilter === void 0) {\n\t\t\t\tminFilter = LinearMipmapLinearFilter;\n\t\t\t}\n\n\t\t\tif (format === void 0) {\n\t\t\t\tformat = RGBAFormat;\n\t\t\t}\n\n\t\t\tif (type === void 0) {\n\t\t\t\ttype = UnsignedByteType;\n\t\t\t}\n\n\t\t\tif (anisotropy === void 0) {\n\t\t\t\tanisotropy = 1;\n\t\t\t}\n\n\t\t\tif (encoding === void 0) {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\t_this.uuid = MathUtils.generateUUID();\n\t\t\t_this.name = '';\n\t\t\t_this.image = image;\n\t\t\t_this.mipmaps = [];\n\t\t\t_this.mapping = mapping;\n\t\t\t_this.wrapS = wrapS;\n\t\t\t_this.wrapT = wrapT;\n\t\t\t_this.magFilter = magFilter;\n\t\t\t_this.minFilter = minFilter;\n\t\t\t_this.anisotropy = anisotropy;\n\t\t\t_this.format = format;\n\t\t\t_this.internalFormat = null;\n\t\t\t_this.type = type;\n\t\t\t_this.offset = new Vector2(0, 0);\n\t\t\t_this.repeat = new Vector2(1, 1);\n\t\t\t_this.center = new Vector2(0, 0);\n\t\t\t_this.rotation = 0;\n\t\t\t_this.matrixAutoUpdate = true;\n\t\t\t_this.matrix = new Matrix3();\n\t\t\t_this.generateMipmaps = true;\n\t\t\t_this.premultiplyAlpha = false;\n\t\t\t_this.flipY = true;\n\t\t\t_this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\t_this.encoding = encoding;\n\t\t\t_this.version = 0;\n\t\t\t_this.onUpdate = null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Texture.prototype;\n\n\t\t_proto.updateMatrix = function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\t_proto.transformUv = function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t};\n\n\t\t_createClass(Texture, [{\n\t\t\tkey: \"needsUpdate\",\n\t\t\tset: function set(value) {\n\t\t\t\tif (value === true) this.version++;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Texture;\n\t}(EventDispatcher);\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tvar WebGLRenderTarget = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(WebGLRenderTarget, _EventDispatcher);\n\n\t\tfunction WebGLRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\t_this.depth = 1;\n\t\t\t_this.scissor = new Vector4(0, 0, width, height);\n\t\t\t_this.scissorTest = false;\n\t\t\t_this.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.image = {};\n\t\t\t_this.texture.image.width = width;\n\t\t\t_this.texture.image.height = height;\n\t\t\t_this.texture.image.depth = 1;\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\t_this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\t_this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLRenderTarget.prototype;\n\n\t\t_proto.setTexture = function setTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t};\n\n\t\t_proto.setSize = function setSize(width, height, depth) {\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\treturn WebGLRenderTarget;\n\t}(EventDispatcher);\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tvar WebGLMultisampleRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLMultisampleRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _WebGLRenderTarget.call(this, width, height, options) || this;\n\t\t\t_this.samples = 4;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLMultisampleRenderTarget.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_WebGLRenderTarget.prototype.copy.call(this, source);\n\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn WebGLMultisampleRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tVector3.prototype.isVector3 = true;\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tif (min === void 0) {\n\t\t\t\tmin = new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\t}\n\n\t\t\tif (max === void 0) {\n\t\t\t\tmax = new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tBox3.prototype.isBox3 = true;\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tif (center === void 0) {\n\t\t\t\tcenter = new Vector3();\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = -1;\n\t\t\t}\n\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tif (origin === void 0) {\n\t\t\t\torigin = new Vector3();\n\t\t\t}\n\n\t\t\tif (direction === void 0) {\n\t\t\t\tdirection = new Vector3(0, 0, -1);\n\t\t\t}\n\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix3 = function setFromMatrix3(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn41 = te[3],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn14 = te[12],\n\t\t\t\t\tn24 = te[13],\n\t\t\t\t\tn34 = te[14],\n\t\t\t\t\tn44 = te[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function clear() {\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tvar object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (var _i3 = 0; _i3 < this.animations.length; _i3++) {\n\t\t\t\t\tvar animation = this.animations[_i3];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tvar skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tvar animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = true;\n\t\t\t}\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tif (normal === void 0) {\n\t\t\t\tnormal = new Vector3(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (constant === void 0) {\n\t\t\t\tconstant = 0;\n\t\t\t}\n\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tPlane.prototype.isPlane = true;\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tif (a === void 0) {\n\t\t\t\ta = new Vector3();\n\t\t\t}\n\n\t\t\tif (b === void 0) {\n\t\t\t\tb = new Vector3();\n\t\t\t}\n\n\t\t\tif (c === void 0) {\n\t\t\t\tc = new Vector3();\n\t\t\t}\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpColors = function lerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tvar MeshBasicMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshBasicMaterial, _Material);\n\n\t\tfunction MeshBasicMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshBasicMaterial';\n\t\t\t_this.color = new Color(0xffffff); // emissive\n\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshBasicMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshBasicMaterial;\n\t}(Material);\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tvar _id = 0;\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _id++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function hasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar indices = index.array;\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal.array;\n\t\t\tvar uvs = attributes.uv.array;\n\t\t\tvar nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tvar tangents = attributes.tangent.array;\n\t\t\tvar tan1 = [],\n\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (var i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tvar vA = new Vector3(),\n\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tvar r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (var _i3 = 0, il = groups.length; _i3 < il; ++_i3) {\n\t\t\t\tvar group = groups[_i3];\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmp = new Vector3(),\n\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tvar n = new Vector3(),\n\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tvar t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tvar test = tmp2.dot(tan2[v]);\n\t\t\t\tvar w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (var _i4 = 0, _il3 = groups.length; _i4 < _il3; ++_i4) {\n\t\t\t\tvar _group = groups[_i4];\n\t\t\t\tvar _start = _group.start;\n\t\t\t\tvar _count = _group.count;\n\n\t\t\t\tfor (var _j = _start, _jl = _start + _count; _j < _jl; _j += 3) {\n\t\t\t\t\thandleVertex(indices[_j + 0]);\n\t\t\t\t\thandleVertex(indices[_j + 1]);\n\t\t\t\t\thandleVertex(indices[_j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i5 = 0, _il4 = index.count; _i5 < _il4; _i5 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i5 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i5 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i5 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i6 = 0, _il5 = positionAttribute.count; _i6 < _il5; _i6 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i6 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i6 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i6 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i7 = 0, l = groups.length; _i7 < l; _i7++) {\n\t\t\t\tvar group = groups[_i7];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute2 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute2.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute2.name !== '') _attributeData.name = _attribute2.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i8 = 0, _l = groups.length; _i8 < _l; _i8++) {\n\t\t\t\tvar group = groups[_i8];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new MeshBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh && material.skinning) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxGeometry, _BufferGeometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tif (fov === void 0) {\n\t\t\tfov = 50;\n\t\t}\n\n\t\tif (aspect === void 0) {\n\t\t\taspect = 1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tvar CubeCamera = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(CubeCamera, _Object3D);\n\n\t\tfunction CubeCamera(near, far, renderTarget) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\t_this.renderTarget = renderTarget;\n\t\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = _this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\n\t\t\t_this.add(cameraPX);\n\n\t\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = _this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\n\t\t\t_this.add(cameraNX);\n\n\t\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = _this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\n\t\t\t_this.add(cameraPY);\n\n\t\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = _this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\n\t\t\t_this.add(cameraNY);\n\n\t\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = _this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\n\t\t\t_this.add(cameraPZ);\n\n\t\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = _this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\n\t\t\t_this.add(cameraNZ);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubeCamera.prototype;\n\n\t\t_proto.update = function update(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar _this$children = this.children,\n\t\t\t\t\tcameraPX = _this$children[0],\n\t\t\t\t\tcameraNX = _this$children[1],\n\t\t\t\t\tcameraPY = _this$children[2],\n\t\t\t\t\tcameraNY = _this$children[3],\n\t\t\t\t\tcameraPZ = _this$children[4],\n\t\t\t\t\tcameraNZ = _this$children[5];\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\n\t\treturn CubeCamera;\n\t}(Object3D);\n\n\tvar CubeTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CubeTexture, _Texture);\n\n\t\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\t_this = _Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this; // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\t_this._needsFlipEnvMap = true;\n\t\t\t_this.flipY = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\t_createClass(CubeTexture, [{\n\t\t\tkey: \"images\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.image;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.image = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn CubeTexture;\n\t}(Texture);\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tvar WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLCubeRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\t\tvar _this;\n\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\t_this = _WebGLRenderTarget.call(this, size, size, options) || this;\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.texture._needsFlipEnvMap = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLCubeRenderTarget.prototype;\n\n\t\t_proto.fromEquirectangularTexture = function fromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tvar shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"\n\t\t\t};\n\t\t\tvar geometry = new BoxGeometry(5, 5, 5);\n\t\t\tvar material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tvar mesh = new Mesh(geometry, material);\n\t\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tvar camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clear = function clear(renderer, color, depth, stencil) {\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t};\n\n\t\treturn WebGLCubeRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tvar DataTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture, _Texture);\n\n\t\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.unpackAlignment = 1;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture;\n\t}(Texture);\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tif (p0 === void 0) {\n\t\t\t\tp0 = new Plane();\n\t\t\t}\n\n\t\t\tif (p1 === void 0) {\n\t\t\t\tp1 = new Plane();\n\t\t\t}\n\n\t\t\tif (p2 === void 0) {\n\t\t\t\tp2 = new Plane();\n\t\t\t}\n\n\t\t\tif (p3 === void 0) {\n\t\t\t\tp3 = new Plane();\n\t\t\t}\n\n\t\t\tif (p4 === void 0) {\n\t\t\t\tp4 = new Plane();\n\t\t\t}\n\n\t\t\tif (p5 === void 0) {\n\t\t\t\tp5 = new Plane();\n\t\t\t}\n\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = 5131;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = 5123;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneGeometry, _BufferGeometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments);\n\t\t\tvar gridY = Math.floor(heightSegments);\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; //\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tif (alpha === void 0) {\n\t\t\t\t\talpha = 1;\n\t\t\t\t}\n\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tvar cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function init(capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tvar extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tvar attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tvar instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tvar DataTexture2DArray = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture2DArray, _Texture);\n\n\t\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\t\tvar _this;\n\n\t\t\tif (data === void 0) {\n\t\t\t\tdata = null;\n\t\t\t}\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\t_this = _Texture.call(this, null) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth\n\t\t\t};\n\t\t\t_this.magFilter = NearestFilter;\n\t\t\t_this.minFilter = NearestFilter;\n\t\t\t_this.wrapR = ClampToEdgeWrapping;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture2DArray;\n\t}(Texture);\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tvar DataTexture3D = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture3D, _Texture);\n\n\t\tfunction DataTexture3D(data, width, height, depth) {\n\t\t\tvar _this;\n\n\t\t\tif (data === void 0) {\n\t\t\t\tdata = null;\n\t\t\t}\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\t_this = _Texture.call(this, null) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth\n\t\t\t};\n\t\t\t_this.magFilter = NearestFilter;\n\t\t\t_this.minFilter = NearestFilter;\n\t\t\t_this.wrapR = ClampToEdgeWrapping;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture3D;\n\t}(Texture);\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'maxMorphTargets', 'maxMorphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tvar list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (var _i3 = 0, l = lights.length; _i3 < l; _i3++) {\n\t\t\t\tvar light = lights[_i3];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms5 = state.spot[spotLength];\n\n\t\t\t\t\t_uniforms5.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms5.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms5.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms5.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms6 = state.rectArea[rectAreaLength];\n\n\t\t\t\t\t_uniforms6.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms6.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms6.halfHeight.applyMatrix4(matrix42);\n\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms7 = state.point[pointLength];\n\n\t\t\t\t\t_uniforms7.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms7.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms8 = state.hemi[hemiLength];\n\n\t\t\t\t\t_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms8.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms8.direction.normalize();\n\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tvar lights = new WebGLLights(extensions, capabilities);\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tif (renderCallDepth === void 0) {\n\t\t\t\trenderCallDepth = 0;\n\t\t\t}\n\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tvar MeshDepthMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshDepthMaterial, _Material);\n\n\t\tfunction MeshDepthMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshDepthMaterial';\n\t\t\t_this.depthPacking = BasicDepthPacking;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.fog = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshDepthMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshDepthMaterial;\n\t}(Material);\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tvar MeshDistanceMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshDistanceMaterial, _Material);\n\n\t\tfunction MeshDistanceMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshDistanceMaterial';\n\t\t\t_this.referencePosition = new Vector3();\n\t\t\t_this.nearDistance = 1;\n\t\t\t_this.farDistance = 1000;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.fog = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshDistanceMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshDistanceMaterial;\n\t}(Material);\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = false;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(3042);\n\t\t\tgl.disable(2884);\n\t\t\tgl.disable(2929);\n\t\t\tgl.disable(32823);\n\t\t\tgl.disable(3089);\n\t\t\tgl.disable(2960);\n\t\t\tgl.blendEquation(32774);\n\t\t\tgl.blendFunc(1, 0);\n\t\t\tgl.blendFuncSeparate(1, 0, 1, 0);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(513);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(519, 0, 0xffffffff);\n\t\t\tgl.stencilOp(7680, 7680, 7680);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(1029);\n\t\t\tgl.frontFace(2305);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(33984);\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(37443, 0);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(37443, 0);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === 32879 || textureTarget === 35866) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\t\tvar glType = utils.convert(texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tvar glTextureType = 3553;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tvar isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? 32879 : 35866;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tif (array === void 0) {\n\t\t\tarray = [];\n\t\t}\n\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array;\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tvar Group = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Group, _Object3D);\n\n\t\tfunction Group() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Group';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn Group;\n\t}(Object3D);\n\n\tGroup.prototype.isGroup = true;\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var _iterator = _createForOfIteratorHelperLoose(inputSource.hand.values()), _step; !(_step = _iterator()).done;) {\n\t\t\t\t\t\tvar inputjoint = _step.value;\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tvar _joint = new Group();\n\n\t\t\t\t\t\t\t_joint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\t_joint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = _joint; // ??\n\n\t\t\t\t\t\t\thand.add(_joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tvar indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tvar thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear();\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null; //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = /*#__PURE__*/function () {\n\t\t\tvar _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {\n\t\t\t\tvar attributes, layerInit, baseLayer;\n\t\t\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\t\t\twhile (1) {\n\t\t\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tsession = value;\n\n\t\t\t\t\t\t\t\tif (!(session !== null)) {\n\t\t\t\t\t\t\t\t\t_context.next = 24;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\t\t\t\tattributes = gl.getContextAttributes();\n\n\t\t\t\t\t\t\t\tif (!(attributes.xrCompatible !== true)) {\n\t\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\treturn gl.makeXRCompatible();\n\n\t\t\t\t\t\t\tcase 14:\n\t\t\t\t\t\t\t\tlayerInit = {\n\t\t\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\t\t\t\tbaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t_context.next = 19;\n\t\t\t\t\t\t\t\treturn session.requestReferenceSpace(referenceSpaceType);\n\n\t\t\t\t\t\t\tcase 19:\n\t\t\t\t\t\t\t\treferenceSpace = _context.sent;\n\t\t\t\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\t\t\t\tanimation.start();\n\t\t\t\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcase 24:\n\t\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, _callee);\n\t\t\t}));\n\n\t\t\treturn function (_x) {\n\t\t\t\treturn _ref.apply(this, arguments);\n\t\t\t};\n\t\t}();\n\n\t\tfunction onInputSourcesChange(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tvar canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tvar renderListStack = [];\n\t\tvar renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true; // always update environment and fog - changing these trigger an initMaterial call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t} // store the light setup it was created for\n\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\t\t\tvar isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tvar _textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\tvar layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(36160, 36064, _textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar _srcTexture$image = srcTexture.image,\n\t\t\t\t\twidth = _srcTexture$image.width,\n\t\t\t\t\theight = _srcTexture$image.height,\n\t\t\t\t\tdata = _srcTexture$image.data;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\tvar glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = 32879;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = 35866;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tvar unpackRowLen = _gl.getParameter(3314);\n\n\t\t\tvar unpackImageHeight = _gl.getParameter(32878);\n\n\t\t\tvar unpackSkipPixels = _gl.getParameter(3316);\n\n\t\t\tvar unpackSkipRows = _gl.getParameter(3315);\n\n\t\t\tvar unpackSkipImages = _gl.getParameter(32877);\n\n\t\t\t_gl.pixelStorei(3314, width);\n\n\t\t\t_gl.pixelStorei(32878, height);\n\n\t\t\t_gl.pixelStorei(3316, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(3315, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(32877, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(3314, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(32878, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(3316, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(3315, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(32877, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tvar WebGL1Renderer = /*#__PURE__*/function (_WebGLRenderer) {\n\t\t_inheritsLoose(WebGL1Renderer, _WebGLRenderer);\n\n\t\tfunction WebGL1Renderer() {\n\t\t\treturn _WebGLRenderer.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn WebGL1Renderer;\n\t}(WebGLRenderer);\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tFog.prototype.isFog = true;\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tScene.prototype.isScene = true;\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tvar SpriteMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(SpriteMaterial, _Material);\n\n\t\tfunction SpriteMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'SpriteMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.rotation = 0;\n\t\t\t_this.sizeAttenuation = true;\n\t\t\t_this.transparent = true;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpriteMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn SpriteMaterial;\n\t}(Material);\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tvar _geometry;\n\n\tvar _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tvar _worldScale = /*@__PURE__*/new Vector3();\n\n\tvar _mvPosition = /*@__PURE__*/new Vector3();\n\n\tvar _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tvar _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tvar _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _vA$1 = /*@__PURE__*/new Vector3();\n\n\tvar _vB$1 = /*@__PURE__*/new Vector3();\n\n\tvar _vC$1 = /*@__PURE__*/new Vector3();\n\n\tvar _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tvar _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tvar _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tvar Sprite = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Sprite, _Object3D);\n\n\t\tfunction Sprite(material) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\t_this.geometry = _geometry;\n\t\t\t_this.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\t_this.center = new Vector2(0.5, 0.5);\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Sprite.prototype;\n\n\t\t_proto.raycast = function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Sprite;\n\t}(Object3D);\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$2 = /*@__PURE__*/new Vector3();\n\n\tvar LOD = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(LOD, _Object3D);\n\n\t\tfunction LOD() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this._currentLevel = 0;\n\t\t\t_this.type = 'LOD';\n\t\t\tObject.defineProperties(_assertThisInitialized(_this), {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\t_this.autoUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LOD.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addLevel = function addLevel(object, distance) {\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCurrentLevel = function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t};\n\n\t\t_proto.getObjectForDistance = function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t_proto.raycast = function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t};\n\n\t\t_proto.update = function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\treturn LOD;\n\t}(Object3D);\n\n\tvar _basePosition = new Vector3();\n\n\tvar _skinIndex = new Vector4();\n\n\tvar _skinWeight = new Vector4();\n\n\tvar _vector$7 = new Vector3();\n\n\tvar _matrix$1 = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function boneTransform(index, target) {\n\t\t\tvar skeleton = this.skeleton;\n\t\t\tvar geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tvar boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar Skeleton = /*#__PURE__*/function () {\n\t\tfunction Skeleton(bones, boneInverses) {\n\t\t\tif (bones === void 0) {\n\t\t\t\tbones = [];\n\t\t\t}\n\n\t\t\tif (boneInverses === void 0) {\n\t\t\t\tboneInverses = [];\n\t\t\t}\n\n\t\t\tthis.uuid = MathUtils.generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tvar _proto = Skeleton.prototype;\n\n\t\t_proto.init = function init() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.calculateInverses = function calculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t};\n\n\t\t_proto.pose = function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.parent.matrixWorld).invert();\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t};\n\n\t\t_proto.getBoneByName = function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (var i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tvar uuid = json.bones[i];\n\t\t\t\tvar bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\n\t\t\tfor (var i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tvar bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tvar boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Skeleton;\n\t}();\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function getColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tvar LineBasicMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(LineBasicMaterial, _Material);\n\n\t\tfunction LineBasicMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'LineBasicMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.linewidth = 1;\n\t\t\t_this.linecap = 'round';\n\t\t\t_this.linejoin = 'round';\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineBasicMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineBasicMaterial;\n\t}(Material);\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new LineBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, _l = positionAttribute.count - 1; _i < _l; _i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LineLoop = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(LineLoop, _Line);\n\n\t\tfunction LineLoop(geometry, material) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Line.call(this, geometry, material) || this;\n\t\t\t_this.type = 'LineLoop';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LineLoop;\n\t}(Line);\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tvar PointsMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(PointsMaterial, _Material);\n\n\t\tfunction PointsMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'PointsMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.size = 1;\n\t\t\t_this.sizeAttenuation = true;\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointsMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn PointsMaterial;\n\t}(Material);\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new PointsMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tvar VideoTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(VideoTexture, _Texture);\n\n\t\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.format = format !== undefined ? format : RGBFormat;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\t_this.generateMipmaps = false;\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = VideoTexture.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t};\n\n\t\treturn VideoTexture;\n\t}(Texture);\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tvar CompressedTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CompressedTexture, _Texture);\n\n\t\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this;\n\t\t\t_this.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\t_this.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\t_this.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\t_this.generateMipmaps = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CompressedTexture;\n\t}(Texture);\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tvar CanvasTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CanvasTexture, _Texture);\n\n\t\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CanvasTexture;\n\t}(Texture);\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tvar DepthTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DepthTexture, _Texture);\n\n\t\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tvar _this;\n\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\t_this.flipY = false;\n\t\t\t_this.generateMipmaps = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DepthTexture;\n\t}(Texture);\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar CircleGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleGeometry, _BufferGeometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 8;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderGeometry, _BufferGeometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radiusTop === void 0) {\n\t\t\t\tradiusTop = 1;\n\t\t\t}\n\n\t\t\tif (radiusBottom === void 0) {\n\t\t\t\tradiusBottom = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(BufferGeometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheGeometry, _BufferGeometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 12;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(BufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar RingGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingGeometry, _BufferGeometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (innerRadius === void 0) {\n\t\t\t\tinnerRadius = 0.5;\n\t\t\t}\n\n\t\t\tif (outerRadius === void 0) {\n\t\t\t\touterRadius = 1;\n\t\t\t}\n\n\t\t\tif (thetaSegments === void 0) {\n\t\t\t\tthetaSegments = 8;\n\t\t\t}\n\n\t\t\tif (phiSegments === void 0) {\n\t\t\t\tphiSegments = 1;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(BufferGeometry);\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeGeometry, _BufferGeometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (curveSegments === void 0) {\n\t\t\t\tcurveSegments = 12;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$1(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$1(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereGeometry, _BufferGeometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 6;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(BufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n\t\t_inheritsLoose(TextGeometry, _ExtrudeGeometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tif (parameters === void 0) {\n\t\t\t\tparameters = {};\n\t\t\t}\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeGeometry.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(ExtrudeGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusGeometry, _BufferGeometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 6;\n\t\t\t}\n\n\t\t\tif (arc === void 0) {\n\t\t\t\tarc = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (p === void 0) {\n\t\t\t\tp = 2;\n\t\t\t}\n\n\t\t\tif (q === void 0) {\n\t\t\t\tq = 3;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeGeometry, _BufferGeometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeGeometry;\n\t}(BufferGeometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t} // buffer\n\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tvar edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tvar edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\tfor (var _i = 0, _l = _position.count / 3; _i < _l; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tvar index1 = 3 * _i + _j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tvar index2 = 3 * _i + (_j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tvar ShadowMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(ShadowMaterial, _Material);\n\n\t\tfunction ShadowMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'ShadowMaterial';\n\t\t\t_this.color = new Color(0x000000);\n\t\t\t_this.transparent = true;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShadowMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ShadowMaterial;\n\t}(Material);\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tvar RawShaderMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n\t\t_inheritsLoose(RawShaderMaterial, _ShaderMaterial);\n\n\t\tfunction RawShaderMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _ShaderMaterial.call(this, parameters) || this;\n\t\t\t_this.type = 'RawShaderMaterial';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RawShaderMaterial;\n\t}(ShaderMaterial);\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshPhongMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshPhongMaterial, _Material);\n\n\t\tfunction MeshPhongMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshPhongMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.specular = new Color(0x111111);\n\t\t\t_this.shininess = 30;\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshPhongMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshPhongMaterial;\n\t}(Material);\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tvar MeshToonMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshToonMaterial, _Material);\n\n\t\tfunction MeshToonMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\t_this.type = 'MeshToonMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.gradientMap = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshToonMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshToonMaterial;\n\t}(Material);\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshNormalMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshNormalMaterial, _Material);\n\n\t\tfunction MeshNormalMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshNormalMaterial';\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.fog = false;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshNormalMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshNormalMaterial;\n\t}(Material);\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tvar MeshLambertMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshLambertMaterial, _Material);\n\n\t\tfunction MeshLambertMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshLambertMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshLambertMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshLambertMaterial;\n\t}(Material);\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshMatcapMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshMatcapMaterial, _Material);\n\n\t\tfunction MeshMatcapMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\t_this.type = 'MeshMatcapMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.matcap = null;\n\t\t\t_this.map = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshMatcapMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshMatcapMaterial;\n\t}(Material);\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tvar LineDashedMaterial = /*#__PURE__*/function (_LineBasicMaterial) {\n\t\t_inheritsLoose(LineDashedMaterial, _LineBasicMaterial);\n\n\t\tfunction LineDashedMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _LineBasicMaterial.call(this) || this;\n\t\t\t_this.type = 'LineDashedMaterial';\n\t\t\t_this.scale = 1;\n\t\t\t_this.dashSize = 3;\n\t\t\t_this.gapSize = 1;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineDashedMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_LineBasicMaterial.prototype.copy.call(this, source);\n\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineDashedMaterial;\n\t}(LineBasicMaterial);\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === void 0) {\n\t\t\t\treferenceFrame = 0;\n\t\t\t}\n\n\t\t\tif (referenceClip === void 0) {\n\t\t\t\treferenceClip = targetClip;\n\t\t\t}\n\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tvar KeyframeTrack = /*#__PURE__*/function () {\n\t\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tKeyframeTrack.toJSON = function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t};\n\n\t\tvar _proto = KeyframeTrack.prototype;\n\n\t\t_proto.InterpolantFactoryMethodDiscrete = function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.InterpolantFactoryMethodLinear = function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.InterpolantFactoryMethodSmooth = function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.setInterpolation = function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getInterpolation = function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t};\n\n\t\t_proto.getValueSize = function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\t\t;\n\n\t\t_proto.shift = function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\t;\n\n\t\t_proto.scale = function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\t;\n\n\t\t_proto.trim = function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\t;\n\n\t\t_proto.validate = function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\t;\n\n\t\t_proto.optimize = function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t};\n\n\t\treturn KeyframeTrack;\n\t}();\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tvar BooleanKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(BooleanKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction BooleanKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn BooleanKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tvar ColorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(ColorKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction ColorKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn ColorKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tvar NumberKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(NumberKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction NumberKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn NumberKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tvar QuaternionKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(QuaternionKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction QuaternionKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\tvar _proto = QuaternionKeyframeTrack.prototype;\n\n\t\t_proto.InterpolantFactoryMethodLinear = function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\treturn QuaternionKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tvar StringKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(StringKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction StringKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn StringKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tvar VectorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(VectorKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction VectorKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn VectorKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tvar AnimationClip = /*#__PURE__*/function () {\n\t\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\t\tif (duration === void 0) {\n\t\t\t\tduration = -1;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t}\n\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tAnimationClip.parse = function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tvar clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t};\n\n\t\tAnimationClip.toJSON = function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t};\n\n\t\tAnimationClip.CreateFromMorphTargetSequence = function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t};\n\n\t\tAnimationClip.findByName = function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tAnimationClip.CreateClipsFromMorphTargetSequences = function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\t\t;\n\n\t\tAnimationClip.parseAnimation = function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t};\n\n\t\tvar _proto = AnimationClip.prototype;\n\n\t\t_proto.resetDuration = function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.trim = function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.validate = function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t};\n\n\t\t_proto.optimize = function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t};\n\n\t\treturn AnimationClip;\n\t}();\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar AnimationLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(AnimationLoader, _Loader);\n\n\t\tfunction AnimationLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = AnimationLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\treturn AnimationLoader;\n\t}(Loader);\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tvar ImageLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ImageLoader, _Loader);\n\n\t\tfunction ImageLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ImageLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t};\n\n\t\treturn ImageLoader;\n\t}(Loader);\n\n\tvar CubeTextureLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(CubeTextureLoader, _Loader);\n\n\t\tfunction CubeTextureLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = CubeTextureLoader.prototype;\n\n\t\t_proto.load = function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t};\n\n\t\treturn CubeTextureLoader;\n\t}(Loader);\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar EllipseCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(EllipseCurve, _Curve);\n\n\t\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar _this;\n\n\t\t\tif (aX === void 0) {\n\t\t\t\taX = 0;\n\t\t\t}\n\n\t\t\tif (aY === void 0) {\n\t\t\t\taY = 0;\n\t\t\t}\n\n\t\t\tif (xRadius === void 0) {\n\t\t\t\txRadius = 1;\n\t\t\t}\n\n\t\t\tif (yRadius === void 0) {\n\t\t\t\tyRadius = 1;\n\t\t\t}\n\n\t\t\tif (aStartAngle === void 0) {\n\t\t\t\taStartAngle = 0;\n\t\t\t}\n\n\t\t\tif (aEndAngle === void 0) {\n\t\t\t\taEndAngle = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (aClockwise === void 0) {\n\t\t\t\taClockwise = false;\n\t\t\t}\n\n\t\t\tif (aRotation === void 0) {\n\t\t\t\taRotation = 0;\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'EllipseCurve';\n\t\t\t_this.aX = aX;\n\t\t\t_this.aY = aY;\n\t\t\t_this.xRadius = xRadius;\n\t\t\t_this.yRadius = yRadius;\n\t\t\t_this.aStartAngle = aStartAngle;\n\t\t\t_this.aEndAngle = aEndAngle;\n\t\t\t_this.aClockwise = aClockwise;\n\t\t\t_this.aRotation = aRotation;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = EllipseCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tvar point = optionalTarget || new Vector2();\n\t\t\tvar twoPi = Math.PI * 2;\n\t\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) {\n\t\t\t\tdeltaAngle += twoPi;\n\t\t\t}\n\n\t\t\twhile (deltaAngle > twoPi) {\n\t\t\t\tdeltaAngle -= twoPi;\n\t\t\t}\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\t\tvar tx = x - this.aX;\n\t\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn EllipseCurve;\n\t}(Curve);\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tvar ArcCurve = /*#__PURE__*/function (_EllipseCurve) {\n\t\t_inheritsLoose(ArcCurve, _EllipseCurve);\n\n\t\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise) || this;\n\t\t\t_this.type = 'ArcCurve';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ArcCurve;\n\t}(EllipseCurve);\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tvar CatmullRomCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CatmullRomCurve3, _Curve);\n\n\t\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\t\tvar _this;\n\n\t\t\tif (points === void 0) {\n\t\t\t\tpoints = [];\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\tif (curveType === void 0) {\n\t\t\t\tcurveType = 'centripetal';\n\t\t\t}\n\n\t\t\tif (tension === void 0) {\n\t\t\t\ttension = 0.5;\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CatmullRomCurve3';\n\t\t\t_this.points = points;\n\t\t\t_this.closed = closed;\n\t\t\t_this.curveType = curveType;\n\t\t\t_this.tension = tension;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CatmullRomCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar points = this.points;\n\t\t\tvar l = points.length;\n\t\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tvar intPoint = Math.floor(p);\n\t\t\tvar weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tvar p1 = points[intPoint % l];\n\t\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tvar point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.points = [];\n\n\t\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tvar point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tvar point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CatmullRomCurve3;\n\t}(Curve);\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tvar CubicBezierCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CubicBezierCurve, _Curve);\n\n\t\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v3 === void 0) {\n\t\t\t\tv3 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CubicBezierCurve';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\t_this.v3 = v3;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubicBezierCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CubicBezierCurve;\n\t}(Curve);\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tvar CubicBezierCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CubicBezierCurve3, _Curve);\n\n\t\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v3 === void 0) {\n\t\t\t\tv3 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CubicBezierCurve3';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\t_this.v3 = v3;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubicBezierCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CubicBezierCurve3;\n\t}(Curve);\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tvar LineCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(LineCurve, _Curve);\n\n\t\tfunction LineCurve(v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'LineCurve';\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\t\t;\n\n\t\t_proto.getPointAt = function getPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t};\n\n\t\t_proto.getTangent = function getTangent(t, optionalTarget) {\n\t\t\tvar tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineCurve;\n\t}(Curve);\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tvar LineCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(LineCurve3, _Curve);\n\n\t\tfunction LineCurve3(v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'LineCurve3';\n\t\t\t_this.isLineCurve3 = true;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\t\t;\n\n\t\t_proto.getPointAt = function getPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineCurve3;\n\t}(Curve);\n\n\tvar QuadraticBezierCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(QuadraticBezierCurve, _Curve);\n\n\t\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'QuadraticBezierCurve';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = QuadraticBezierCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn QuadraticBezierCurve;\n\t}(Curve);\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tvar QuadraticBezierCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(QuadraticBezierCurve3, _Curve);\n\n\t\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'QuadraticBezierCurve3';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = QuadraticBezierCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn QuadraticBezierCurve3;\n\t}(Curve);\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tvar SplineCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(SplineCurve, _Curve);\n\n\t\tfunction SplineCurve(points) {\n\t\t\tvar _this;\n\n\t\t\tif (points === void 0) {\n\t\t\t\tpoints = [];\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'SplineCurve';\n\t\t\t_this.points = points;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SplineCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar points = this.points;\n\t\t\tvar p = (points.length - 1) * t;\n\t\t\tvar intPoint = Math.floor(p);\n\t\t\tvar weight = p - intPoint;\n\t\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tvar p1 = points[intPoint];\n\t\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tvar point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.points = [];\n\n\t\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tvar point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tvar point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn SplineCurve;\n\t}(Curve);\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tvar CurvePath = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CurvePath, _Curve);\n\n\t\tfunction CurvePath() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CurvePath';\n\t\t\t_this.curves = [];\n\t\t\t_this.autoClose = false; // Automatically closes the path\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CurvePath.prototype;\n\n\t\t_proto.add = function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t};\n\n\t\t_proto.closePath = function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\t;\n\n\t\t_proto.getPoint = function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\t;\n\n\t\t_proto.getLength = function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\t\t;\n\n\t\t_proto.updateArcLengths = function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\t;\n\n\t\t_proto.getCurveLengths = function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t};\n\n\t\t_proto.getSpacedPoints = function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 40;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t};\n\n\t\t_proto.getPoints = function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 12;\n\t\t\t}\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CurvePath;\n\t}(Curve);\n\n\tvar Path = /*#__PURE__*/function (_CurvePath) {\n\t\t_inheritsLoose(Path, _CurvePath);\n\n\t\tfunction Path(points) {\n\t\t\tvar _this;\n\n\t\t\t_this = _CurvePath.call(this) || this;\n\t\t\t_this.type = 'Path';\n\t\t\t_this.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\t_this.setFromPoints(points);\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Path.prototype;\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.moveTo = function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lineTo = function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.quadraticCurveTo = function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.bezierCurveTo = function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.splineThru = function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.arc = function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.absarc = function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ellipse = function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.absellipse = function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_CurvePath.prototype.copy.call(this, source);\n\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _CurvePath.prototype.toJSON.call(this);\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_CurvePath.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Path;\n\t}(CurvePath);\n\n\tvar Shape = /*#__PURE__*/function (_Path) {\n\t\t_inheritsLoose(Shape, _Path);\n\n\t\tfunction Shape(points) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Path.call(this, points) || this;\n\t\t\t_this.uuid = MathUtils.generateUUID();\n\t\t\t_this.type = 'Shape';\n\t\t\t_this.holes = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Shape.prototype;\n\n\t\t_proto.getPointsHoles = function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\t\t;\n\n\t\t_proto.extractPoints = function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Path.prototype.copy.call(this, source);\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Path.prototype.toJSON.call(this);\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Path.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Shape;\n\t}(Path);\n\n\tvar Light = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Light, _Object3D);\n\n\t\tfunction Light(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Light';\n\t\t\t_this.color = new Color(color);\n\t\t\t_this.intensity = intensity;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Light.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Light;\n\t}(Object3D);\n\n\tLight.prototype.isLight = true;\n\n\tvar HemisphereLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(HemisphereLight, _Light);\n\n\t\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, skyColor, intensity) || this;\n\t\t\t_this.type = 'HemisphereLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.groundColor = new Color(groundColor);\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn HemisphereLight;\n\t}(Light);\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tvar _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tvar _lookTarget = /*@__PURE__*/new Vector3();\n\n\tvar LightShadow = /*#__PURE__*/function () {\n\t\tfunction LightShadow(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tvar _proto = LightShadow.prototype;\n\n\t\t_proto.getViewportCount = function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t};\n\n\t\t_proto.getFrustum = function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t};\n\n\t\t_proto.updateMatrices = function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera;\n\t\t\tvar shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t};\n\n\t\t_proto.getViewport = function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t};\n\n\t\t_proto.getFrameExtents = function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t};\n\n\t\treturn LightShadow;\n\t}();\n\n\tvar SpotLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(SpotLightShadow, _LightShadow);\n\n\t\tfunction SpotLightShadow() {\n\t\t\tvar _this;\n\n\t\t\t_this = _LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500)) || this;\n\t\t\t_this.focus = 1;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightShadow.prototype;\n\n\t\t_proto.updateMatrices = function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_LightShadow.prototype.updateMatrices.call(this, light);\n\t\t};\n\n\t\treturn SpotLightShadow;\n\t}(LightShadow);\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tvar SpotLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(SpotLight, _Light);\n\n\t\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\t\tvar _this;\n\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif (angle === void 0) {\n\t\t\t\tangle = Math.PI / 3;\n\t\t\t}\n\n\t\t\tif (penumbra === void 0) {\n\t\t\t\tpenumbra = 0;\n\t\t\t}\n\n\t\t\tif (decay === void 0) {\n\t\t\t\tdecay = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'SpotLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.target = new Object3D();\n\t\t\t_this.distance = distance;\n\t\t\t_this.angle = angle;\n\t\t\t_this.penumbra = penumbra;\n\t\t\t_this.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\t_this.shadow = new SpotLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(SpotLight, [{\n\t\t\tkey: \"power\",\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t}]);\n\n\t\treturn SpotLight;\n\t}(Light);\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tvar _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tvar _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tvar _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tvar PointLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(PointLightShadow, _LightShadow);\n\n\t\tfunction PointLightShadow() {\n\t\t\tvar _this;\n\n\t\t\t_this = _LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500)) || this;\n\t\t\t_this._frameExtents = new Vector2(4, 2);\n\t\t\t_this._viewportCount = 6;\n\t\t\t_this._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\t_this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\t_this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightShadow.prototype;\n\n\t\t_proto.updateMatrices = function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === void 0) {\n\t\t\t\tviewportIndex = 0;\n\t\t\t}\n\n\t\t\tvar camera = this.camera;\n\t\t\tvar shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.copy(camera.position);\n\n\t\t\t_lookTarget$1.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget$1);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld$1.x, -_lightPositionWorld$1.y, -_lightPositionWorld$1.z);\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\t\t};\n\n\t\treturn PointLightShadow;\n\t}(LightShadow);\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tvar PointLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(PointLight, _Light);\n\n\t\tfunction PointLight(color, intensity, distance, decay) {\n\t\t\tvar _this;\n\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif (decay === void 0) {\n\t\t\t\tdecay = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'PointLight';\n\t\t\t_this.distance = distance;\n\t\t\t_this.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\t_this.shadow = new PointLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(PointLight, [{\n\t\t\tkey: \"power\",\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t}]);\n\n\t\treturn PointLight;\n\t}(Light);\n\n\tPointLight.prototype.isPointLight = true;\n\n\tvar OrthographicCamera = /*#__PURE__*/function (_Camera) {\n\t\t_inheritsLoose(OrthographicCamera, _Camera);\n\n\t\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\t\tvar _this;\n\n\t\t\tif (left === void 0) {\n\t\t\t\tleft = -1;\n\t\t\t}\n\n\t\t\tif (right === void 0) {\n\t\t\t\tright = 1;\n\t\t\t}\n\n\t\t\tif (top === void 0) {\n\t\t\t\ttop = 1;\n\t\t\t}\n\n\t\t\tif (bottom === void 0) {\n\t\t\t\tbottom = -1;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 2000;\n\t\t\t}\n\n\t\t\t_this = _Camera.call(this) || this;\n\t\t\t_this.type = 'OrthographicCamera';\n\t\t\t_this.zoom = 1;\n\t\t\t_this.view = null;\n\t\t\t_this.left = left;\n\t\t\t_this.right = right;\n\t\t\t_this.top = top;\n\t\t\t_this.bottom = bottom;\n\t\t\t_this.near = near;\n\t\t\t_this.far = far;\n\n\t\t\t_this.updateProjectionMatrix();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = OrthographicCamera.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Camera.prototype.copy.call(this, source, recursive);\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setViewOffset = function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t};\n\n\t\t_proto.clearViewOffset = function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t};\n\n\t\t_proto.updateProjectionMatrix = function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t};\n\n\t\treturn OrthographicCamera;\n\t}(Camera);\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tvar DirectionalLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(DirectionalLightShadow, _LightShadow);\n\n\t\tfunction DirectionalLightShadow() {\n\t\t\treturn _LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500)) || this;\n\t\t}\n\n\t\treturn DirectionalLightShadow;\n\t}(LightShadow);\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tvar DirectionalLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(DirectionalLight, _Light);\n\n\t\tfunction DirectionalLight(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'DirectionalLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.target = new Object3D();\n\t\t\t_this.shadow = new DirectionalLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn DirectionalLight;\n\t}(Light);\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tvar AmbientLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(AmbientLight, _Light);\n\n\t\tfunction AmbientLight(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'AmbientLight';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AmbientLight;\n\t}(Light);\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tvar RectAreaLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(RectAreaLight, _Light);\n\n\t\tfunction RectAreaLight(color, intensity, width, height) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 10;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 10;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'RectAreaLight';\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = RectAreaLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Light.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t};\n\n\t\treturn RectAreaLight;\n\t}(Light);\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tvar LightProbe = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(LightProbe, _Light);\n\n\t\tfunction LightProbe(sh, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (sh === void 0) {\n\t\t\t\tsh = new SphericalHarmonics3();\n\t\t\t}\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, undefined, intensity) || this;\n\t\t\t_this.sh = sh;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LightProbe.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Light.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn LightProbe;\n\t}(Light);\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tvar MaterialLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(MaterialLoader, _Loader);\n\n\t\tfunction MaterialLoader(manager) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Loader.call(this, manager) || this;\n\t\t\t_this.textures = {};\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MaterialLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t};\n\n\t\t_proto.setTextures = function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MaterialLoader;\n\t}(Loader);\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar BufferGeometryLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(BufferGeometryLoader, _Loader);\n\n\t\tfunction BufferGeometryLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = BufferGeometryLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = getTypedArray(attribute.type, attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = getTypedArray(_attribute.type, _attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t};\n\n\t\treturn BufferGeometryLoader;\n\t}(Loader);\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar animations = this.parseAnimations(json.animations);\n\t\t\tvar shapes = this.parseShapes(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tvar skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tvar hasImages = false;\n\n\t\t\t\tfor (var uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShapes = function parseShapes(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseSkeletons = function parseSkeletons(json, object) {\n\t\t\tvar skeletons = {};\n\t\t\tvar bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\t\tvar data = json[i];\n\t\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tvar url = image;\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (_deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = _deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\t\t\t\t\tvar image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials, animations) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tvar objectAnimations = data.animations;\n\n\t\t\t\tfor (var _i = 0; _i < objectAnimations.length; _i++) {\n\t\t\t\t\tvar uuid = objectAnimations[_i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.bindSkeletons = function bindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tvar skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tvar ShapePath = /*#__PURE__*/function () {\n\t\tfunction ShapePath() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tvar _proto = ShapePath.prototype;\n\n\t\t_proto.moveTo = function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lineTo = function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.quadraticCurveTo = function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.bezierCurveTo = function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.splineThru = function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toShapes = function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn ShapePath;\n\t}();\n\n\tvar Font = /*#__PURE__*/function () {\n\t\tfunction Font(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tvar _proto = Font.prototype;\n\n\t\t_proto.generateShapes = function generateShapes(text, size) {\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 100;\n\t\t\t}\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn Font;\n\t}();\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from(text);\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tvar FontLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(FontLoader, _Loader);\n\n\t\tfunction FontLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = FontLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\treturn new Font(json);\n\t\t};\n\n\t\treturn FontLoader;\n\t}(Loader);\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tvar AudioLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(AudioLoader, _Loader);\n\n\t\tfunction AudioLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = AudioLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\treturn AudioLoader;\n\t}(Loader);\n\n\tvar HemisphereLightProbe = /*#__PURE__*/function (_LightProbe) {\n\t\t_inheritsLoose(HemisphereLightProbe, _LightProbe);\n\n\t\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _LightProbe.call(this, undefined, intensity) || this;\n\t\t\tvar color1 = new Color().set(skyColor);\n\t\t\tvar color2 = new Color().set(groundColor);\n\t\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tvar c0 = Math.sqrt(Math.PI);\n\t\t\tvar c1 = c0 * Math.sqrt(0.75);\n\n\t\t\t_this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\n\t\t\t_this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn HemisphereLightProbe;\n\t}(LightProbe);\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tvar AmbientLightProbe = /*#__PURE__*/function (_LightProbe) {\n\t\t_inheritsLoose(AmbientLightProbe, _LightProbe);\n\n\t\tfunction AmbientLightProbe(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _LightProbe.call(this, undefined, intensity) || this;\n\t\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\t_this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AmbientLightProbe;\n\t}(LightProbe);\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tvar StereoCamera = /*#__PURE__*/function () {\n\t\tfunction StereoCamera() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tvar _proto = StereoCamera.prototype;\n\n\t\t_proto.update = function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t};\n\n\t\treturn StereoCamera;\n\t}();\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === void 0) {\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tif (fftSize === void 0) {\n\t\t\t\tfftSize = 2048;\n\t\t\t}\n\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tvar PropertyMixer = /*#__PURE__*/function () {\n\t\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\tvar _proto = PropertyMixer.prototype;\n\n\t\t_proto.accumulate = function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\t\t;\n\n\t\t_proto.accumulateAdditive = function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\t\t;\n\n\t\t_proto.apply = function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\t\t;\n\n\t\t_proto.saveOriginalState = function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\t\t;\n\n\t\t_proto.restoreOriginalState = function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t};\n\n\t\t_proto._setAdditiveIdentityNumeric = function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t};\n\n\t\t_proto._setAdditiveIdentityQuaternion = function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t};\n\n\t\t_proto._setAdditiveIdentityOther = function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\t\t;\n\n\t\t_proto._select = function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._slerp = function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t};\n\n\t\t_proto._slerpAdditive = function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t};\n\n\t\t_proto._lerp = function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t};\n\n\t\t_proto._lerpAdditive = function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t};\n\n\t\treturn PropertyMixer;\n\t}();\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tvar AnimationObjectGroup = /*#__PURE__*/function () {\n\t\tfunction AnimationObjectGroup() {\n\t\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tvar indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tvar _proto = AnimationObjectGroup.prototype;\n\n\t\t_proto.add = function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t};\n\n\t\t_proto.remove = function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\t\t;\n\n\t\t_proto.uncache = function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tif (_lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\t\t;\n\n\t\t_proto.subscribe_ = function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t};\n\n\t\t_proto.unsubscribe_ = function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t};\n\n\t\treturn AnimationObjectGroup;\n\t}();\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tif (localRoot === void 0) {\n\t\t\t\tlocalRoot = null;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = clip.blendMode;\n\t\t\t}\n\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tvar AnimationMixer = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(AnimationMixer, _EventDispatcher);\n\n\t\tfunction AnimationMixer(root) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\t_this._root = root;\n\n\t\t\t_this._initMemoryManager();\n\n\t\t\t_this._accuIndex = 0;\n\t\t\t_this.time = 0;\n\t\t\t_this.timeScale = 1.0;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AnimationMixer.prototype;\n\n\t\t_proto._bindAction = function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t};\n\n\t\t_proto._activateAction = function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t};\n\n\t\t_proto._deactivateAction = function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\t\t;\n\n\t\t_proto._initMemoryManager = function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\t\t;\n\n\t\t_proto._isActiveAction = function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t};\n\n\t\t_proto._addInactiveAction = function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t};\n\n\t\t_proto._removeInactiveAction = function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t};\n\n\t\t_proto._removeInactiveBindingsForAction = function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._lendAction = function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t};\n\n\t\t_proto._takeBackAction = function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\t\t;\n\n\t\t_proto._addInactiveBinding = function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t};\n\n\t\t_proto._removeInactiveBinding = function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t};\n\n\t\t_proto._lendBinding = function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t};\n\n\t\t_proto._takeBackBinding = function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\t\t;\n\n\t\t_proto._lendControlInterpolant = function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t};\n\n\t\t_proto._takeBackControlInterpolant = function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\t;\n\n\t\t_proto.clipAction = function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\t\t;\n\n\t\t_proto.existingAction = function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\t\t;\n\n\t\t_proto.stopAllAction = function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\t\t;\n\n\t\t_proto.update = function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\t\t;\n\n\t\t_proto.setTime = function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\t\t;\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\t\t;\n\n\t\t_proto.uncacheClip = function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\t\t;\n\n\t\t_proto.uncacheRoot = function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\t\t;\n\n\t\t_proto.uncacheAction = function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t};\n\n\t\treturn AnimationMixer;\n\t}(EventDispatcher);\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tif (near === void 0) {\n\t\t\tnear = 0;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = Infinity;\n\t\t}\n\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, intersects) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = false;\n\t\t\t}\n\n\t\t\tif (intersects === void 0) {\n\t\t\t\tintersects = [];\n\t\t\t}\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, intersects) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = false;\n\t\t\t}\n\n\t\t\tif (intersects === void 0) {\n\t\t\t\tintersects = [];\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$8 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tif (min === void 0) {\n\t\t\t\tmin = new Vector2(+Infinity, +Infinity);\n\t\t\t}\n\n\t\t\tif (max === void 0) {\n\t\t\t\tmax = new Vector2(-Infinity, -Infinity);\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$8.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$8.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tBox2.prototype.isBox2 = true;\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tif (start === void 0) {\n\t\t\t\tstart = new Vector3();\n\t\t\t}\n\n\t\t\tif (end === void 0) {\n\t\t\t\tend = new Vector3();\n\t\t\t}\n\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$9);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 10;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 10;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 10;\n\t\t\t}\n\n\t\t\tif (radials === void 0) {\n\t\t\t\tradials = 16;\n\t\t\t}\n\n\t\t\tif (circles === void 0) {\n\t\t\t\tcircles = 8;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 64;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$c = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$c.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tif (hex === void 0) {\n\t\t\t\thex = 0xffff00;\n\t\t\t}\n\n\t\t\tvar color = hex;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\t// dir is assumed to be normalized\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\tif (dir === void 0) {\n\t\t\t\tdir = new Vector3(0, 0, 1);\n\t\t\t}\n\n\t\t\tif (origin === void 0) {\n\t\t\t\torigin = new Vector3(0, 0, 0);\n\t\t\t}\n\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tif (headLength === void 0) {\n\t\t\t\theadLength = length * 0.2;\n\t\t\t}\n\n\t\t\tif (headWidth === void 0) {\n\t\t\t\theadWidth = headLength * 0.2;\n\t\t\t}\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === void 0) {\n\t\t\t\theadLength = length * 0.2;\n\t\t\t}\n\n\t\t\tif (headWidth === void 0) {\n\t\t\t\theadWidth = headLength * 0.2;\n\t\t\t}\n\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _floatView = new Float32Array(1);\n\n\tvar _int32View = new Int32Array(_floatView.buffer);\n\n\tvar DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tvar x = _int32View[0];\n\t\t\tvar bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tvar m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tvar e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\tvar backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tvar backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _clearColor = /*@__PURE__*/new Color();\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tfunction convertLinearToRGBE(color) {\n\t\tvar maxComponent = Math.max(color.r, color.g, color.b);\n\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tvar useSolidColor = false;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tvar alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\n\t\t\t\tvar _alpha = convertLinearToRGBE(backgroundMaterial.color);\n\n\t\t\t\tbackgroundMaterial.opacity = _alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === void 0) {\n\t\t\tmaterials = [];\n\t\t}\n\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMathUtils.random16 = function () {\n\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\treturn Math.random();\n\t};\n\n\tMathUtils.nearestPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\treturn MathUtils.floorPowerOfTwo(value);\n\t};\n\n\tMathUtils.nextPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t// the target DOM element for key events\n\tthis._domElementKeyEvents = null;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t}\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}